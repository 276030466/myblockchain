#!/bin/bash
#
### BEGIN INIT INFO
# Provides:          myblockchain
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Should-Start:      $network $time
# Should-Stop:       $network $time
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/ Stop MyBlockchain Community Server daemon
# Description:       This service script facilitates startup and shutdown of
#                    myblockchaind daemon throught its wrapper script myblockchaind_safe
### END INIT INFO
#

# Copyright (c) 2014, 2015, Oracle and/or its affiliates. All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

. /lib/lsb/init-functions

cd /
umask 077

# In case server is taking more to start or stop increase the timeout here
STARTTIMEOUT=180
STOPTIMEOUT=60

VERSION=$(myblockchaind --version | grep myblockchaind | cut -d' ' -f4)

get_path () {
	my_print_defaults myblockchaind | grep ${1} | cut -d= -f2
}

get_pcount () {
	PIDFILE=$(get_path pid-file)
	if [ -e "${PIDFILE}" ];
	then
		echo 1
	else
		echo 0
	fi
}

verify_server () {
	TIMEOUT=0
	if [ "${1}" = "start" ];
	then
		TIMEOUT=${STARTTIMEOUT}
	elif [ "${1}" = "stop" ];
	then
		TIMEOUT=${STOPTIMEOUT}
	fi

	COUNT=0
	while [ ${COUNT} -lt ${TIMEOUT} ];
	do
		COUNT=$(( COUNT+1 ))
		echo -n .
		if [ "${1}" = "start" ] && [ "$(get_pcount)" = 1 ];
		then
			if [ -z ${2} ];
			then
				echo
			fi
			return 0
		fi
		if [ "${1}" = "stop" ] && [ "$(get_pcount)" = 0 ];
		then
			if [ -z ${2} ];
			then
				echo
			fi
			return 0
		fi
		sleep 1
	done
	return 1
}

case "$1" in
  'start')
	if [ "$(get_pcount)" -eq 1 ];
	then
		log_action_msg "A MyBlockchain Server is already started"
	else
		MYBLOCKCHAINRUN=/var/run/myblockchaind
		MYBLOCKCHAINDATA=$(get_path datadir)
		MYBLOCKCHAINFILES=/var/lib/myblockchain-files
		MYBLOCKCHAINLOG=/var/log/myblockchain

		if [ ! -d ${MYBLOCKCHAINDATA} -a ! -L ${MYBLOCKCHAINDATA} ];
		then
			mkdir ${MYBLOCKCHAINDATA}
			chown myblockchain:myblockchain ${MYBLOCKCHAINDATA}
			chmod 750 ${MYBLOCKCHAINDATA}
		fi

		if [ ! -d ${MYBLOCKCHAINFILES} -a ! -L ${MYBLOCKCHAINFILES} ];
		then
			mkdir ${MYBLOCKCHAINFILES}
			chown myblockchain:myblockchain ${MYBLOCKCHAINFILES}
			chmod 770 ${MYBLOCKCHAINFILES}
		fi

		if [ ! "$(ls -A ${MYBLOCKCHAINDATA})" ] && [ -d ${MYBLOCKCHAINFILES} ];
		then
			su - myblockchain -s /bin/bash -c "/usr/sbin/myblockchaind --initialize-insecure=on 2>&1 > /dev/null"
			su - myblockchain -s /bin/bash -c "/usr/sbin/myblockchaind --log_error_verbosity=2 2>&1 > /dev/null &"
			verify_server start no-newline
			myblockchain -e "INSTALL PLUGIN auth_socket SONAME 'auth_socket.so'"
			myblockchain -e "USE myblockchain; UPDATE user SET plugin='auth_socket' WHERE user='root'"
			myblockchainadmin shutdown
		fi

		if [ -x /usr/bin/myblockchain_ssl_rsa_setup -a ! -e "${MYBLOCKCHAINDATA}/server-key.pem" ];
		then
			/usr/bin/myblockchain_ssl_rsa_setup --datadir="${MYBLOCKCHAINDATA}" --uid=myblockchain >/dev/null 2>&1
		fi

		if [ ! -d ${MYBLOCKCHAINLOG} -a ! -L ${MYBLOCKCHAINLOG} ];
		then
			mkdir ${MYBLOCKCHAINLOG}
			chown myblockchain:adm ${MYBLOCKCHAINLOG}
			chmod 750 ${MYBLOCKCHAINLOG}
			touch ${MYBLOCKCHAINLOG}/error.log
			chmod 640 ${MYBLOCKCHAINLOG}/error.log
			chown myblockchain:adm ${MYBLOCKCHAINLOG}/error.log
		fi

		if [ ! -d "${MYBLOCKCHAINRUN}" -a ! -L "${MYBLOCKCHAINRUN}" ];
		then
			mkdir ${MYBLOCKCHAINRUN}
			chown myblockchain:myblockchain ${MYBLOCKCHAINRUN}
			chmod 755 ${MYBLOCKCHAINRUN}
		fi

		/lib/init/apparmor-profile-load usr.sbin.myblockchaind

		su - myblockchain -s /bin/bash -c "myblockchaind_safe > /dev/null &"
		verify_server start
		if [ "$?" -eq 0 ];
		then
			log_action_msg "MyBlockchain Community Server ${VERSION} is started"
		else
			log_action_msg "MyBlockchain Community Server ${VERSION} did not start. Please check logs for more details."
		fi
	fi
	;;

  'stop')
	if [ "$(get_pcount)" -eq 1 ];
	then
		killall -u myblockchain
		verify_server stop
		if [ "$?" -eq 0 ];
		then
			log_action_msg "MyBlockchain Community Server ${VERSION} is stopped"
		else
			log_action_msg "Attempt to shutdown MyBlockchain Community Server ${VERSION} timed out"
		fi
	else
		log_action_msg "MyBlockchain Community Server ${VERSION} is already stopped"
	fi
	;;

  'restart'|'reload'|'force-reload')
	log_action_msg "Stopping MyBlockchain Community Server ${VERSION}"
	$0 stop
	log_action_msg "Re-starting MyBlockchain Community Server ${VERSION}"
	$0 start
	;;

  'status')
	if [ "$(get_pcount)" -eq 1 ];
	then
		log_action_msg "MyBlockchain Community Server ${VERSION} is running"
	else
		log_action_msg "MyBlockchain Community Server ${VERSION} is not running"
		exit 3
	fi
	;;

  *)
	echo "Usage: $SELF start|stop|restart|reload|force-reload|status"
	exit 1
	;;
esac

exit 0
