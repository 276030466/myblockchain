diff -rup old/libmyblockchain/libmyblockchain.c new/libmyblockchain/libmyblockchain.c
--- old/libmyblockchain/libmyblockchain.c	2013-11-04 20:15:10.000000000 +0100
+++ new/libmyblockchain/libmyblockchain.c	2014-01-14 12:10:27.148374504 +0100
@@ -4898,3 +4898,612 @@ my_bool STDCALL myblockchain_read_query_result(
   return (*myblockchain->methods->read_query_result)(myblockchain);
 }
 
+#ifndef EMBEDDED_LIBRARY
+
+// Hack to provide both libmyblockchainclient_16 and libmyblockchainclient_18 symbol versions
+
+#define SYM_16(_exportedsym) __asm__(".symver symver16_" #_exportedsym "," #_exportedsym "@libmyblockchainclient_16")
+
+void STDCALL symver16_myodbc_remove_escape(MYBLOCKCHAIN *myblockchain,char *name)
+{
+  return myodbc_remove_escape(myblockchain, name);
+}
+SYM_16(myodbc_remove_escape);
+
+
+my_ulonglong STDCALL symver16_myblockchain_affected_rows(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_affected_rows(myblockchain);
+}
+SYM_16(myblockchain_affected_rows);
+
+
+my_bool STDCALL symver16_myblockchain_autocommit(MYBLOCKCHAIN * myblockchain, my_bool auto_mode)
+{
+  return myblockchain_autocommit(myblockchain, auto_mode);
+}
+SYM_16(myblockchain_autocommit);
+
+
+my_bool STDCALL symver16_myblockchain_change_user(MYBLOCKCHAIN *myblockchain, const char *user, const char *passwd, const char *db)
+{
+  return myblockchain_change_user(myblockchain, user, passwd, db);
+}
+SYM_16(myblockchain_change_user);
+
+
+const char * STDCALL symver16_myblockchain_character_set_name(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_character_set_name(myblockchain);
+}
+SYM_16(myblockchain_character_set_name);
+
+
+my_bool STDCALL symver16_myblockchain_commit(MYBLOCKCHAIN * myblockchain)
+{
+  return myblockchain_commit(myblockchain);
+}
+SYM_16(myblockchain_commit);
+
+
+void STDCALL symver16_myblockchain_data_seek(MYBLOCKCHAIN_RES *result, my_ulonglong row)
+{
+  return myblockchain_data_seek(result, row);
+}
+SYM_16(myblockchain_data_seek);
+
+
+void STDCALL symver16_myblockchain_debug(const char *debug __attribute__((unused)))
+{
+  return myblockchain_debug(debug);
+}
+SYM_16(myblockchain_debug);
+
+
+int STDCALL symver16_myblockchain_dump_debug_info(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_dump_debug_info(myblockchain);
+}
+SYM_16(myblockchain_dump_debug_info);
+
+
+my_bool STDCALL symver16_myblockchain_embedded(void)
+{
+  return myblockchain_embedded();
+}
+SYM_16(myblockchain_embedded);
+
+
+my_bool STDCALL symver16_myblockchain_eof(MYBLOCKCHAIN_RES *res)
+{
+  return myblockchain_eof(res);
+}
+SYM_16(myblockchain_eof);
+
+
+ulong STDCALL symver16_myblockchain_escape_string(char *to,const char *from,ulong length)
+{
+  return myblockchain_escape_string(to, from, length);
+}
+SYM_16(myblockchain_escape_string);
+
+
+MYBLOCKCHAIN_FIELD * STDCALL symver16_myblockchain_fetch_field(MYBLOCKCHAIN_RES *result)
+{
+  return myblockchain_fetch_field(result);
+}
+SYM_16(myblockchain_fetch_field);
+
+
+MYBLOCKCHAIN_FIELD * STDCALL symver16_myblockchain_fetch_field_direct(MYBLOCKCHAIN_RES *res,uint fieldnr)
+{
+  return myblockchain_fetch_field_direct(res, fieldnr);
+}
+SYM_16(myblockchain_fetch_field_direct);
+
+
+MYBLOCKCHAIN_FIELD * STDCALL symver16_myblockchain_fetch_fields(MYBLOCKCHAIN_RES *res)
+{
+  return myblockchain_fetch_fields(res);
+}
+SYM_16(myblockchain_fetch_fields);
+
+
+unsigned int STDCALL symver16_myblockchain_field_count(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_field_count(myblockchain);
+}
+SYM_16(myblockchain_field_count);
+
+
+MYBLOCKCHAIN_FIELD_OFFSET STDCALL symver16_myblockchain_field_seek(MYBLOCKCHAIN_RES *result, MYBLOCKCHAIN_FIELD_OFFSET field_offset)
+{
+  return myblockchain_field_seek(result, field_offset);
+}
+SYM_16(myblockchain_field_seek);
+
+
+MYBLOCKCHAIN_FIELD_OFFSET STDCALL symver16_myblockchain_field_tell(MYBLOCKCHAIN_RES *res)
+{
+  return myblockchain_field_tell(res);
+}
+SYM_16(myblockchain_field_tell);
+
+
+void STDCALL symver16_myblockchain_get_character_set_info(MYBLOCKCHAIN *myblockchain, MY_CHARSET_INFO *csinfo)
+{
+  return myblockchain_get_character_set_info(myblockchain, csinfo);
+}
+SYM_16(myblockchain_get_character_set_info);
+
+
+const char * STDCALL symver16_myblockchain_get_client_info(void)
+{
+  return myblockchain_get_client_info();
+}
+SYM_16(myblockchain_get_client_info);
+
+ulong STDCALL symver16_myblockchain_get_client_version(void)
+{
+  return myblockchain_get_client_version();
+}
+SYM_16(myblockchain_get_client_version);
+
+
+const char * STDCALL symver16_myblockchain_get_host_info(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_get_host_info(myblockchain);
+}
+SYM_16(myblockchain_get_host_info);
+
+
+MYBLOCKCHAIN_PARAMETERS *STDCALL symver16_myblockchain_get_parameters(void)
+{
+  return myblockchain_get_parameters();
+}
+SYM_16(myblockchain_get_parameters);
+
+
+uint STDCALL symver16_myblockchain_get_proto_info(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_get_proto_info(myblockchain);
+}
+SYM_16(myblockchain_get_proto_info);
+
+
+const char * STDCALL symver16_myblockchain_get_server_info(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_get_server_info(myblockchain);
+}
+SYM_16(myblockchain_get_server_info);
+
+
+ulong STDCALL symver16_myblockchain_hex_string(char *to, const char *from, ulong length)
+{
+  return myblockchain_hex_string(to, from, length);
+}
+SYM_16(myblockchain_hex_string);
+
+
+const char *STDCALL symver16_myblockchain_info(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_info(myblockchain);
+}
+SYM_16(myblockchain_info);
+
+
+my_ulonglong STDCALL symver16_myblockchain_insert_id(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_insert_id(myblockchain);
+}
+SYM_16(myblockchain_insert_id);
+
+
+int STDCALL symver16_myblockchain_kill(MYBLOCKCHAIN *myblockchain,ulong pid)
+{
+  return myblockchain_kill(myblockchain, pid);
+}
+SYM_16(myblockchain_kill);
+
+
+MYBLOCKCHAIN_RES * STDCALL symver16_myblockchain_list_dbs(MYBLOCKCHAIN *myblockchain, const char *wild)
+{
+  return myblockchain_list_dbs(myblockchain, wild);
+}
+SYM_16(myblockchain_list_dbs);
+
+
+MYBLOCKCHAIN_RES * STDCALL symver16_myblockchain_list_fields(MYBLOCKCHAIN *myblockchain, const char *table, const char *wild)
+{
+  return myblockchain_list_fields(myblockchain, table, wild);
+}
+SYM_16(myblockchain_list_fields);
+
+
+MYBLOCKCHAIN_RES * STDCALL symver16_myblockchain_list_processes(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_list_processes(myblockchain);
+}
+SYM_16(myblockchain_list_processes);
+
+
+MYBLOCKCHAIN_RES * STDCALL symver16_myblockchain_list_tables(MYBLOCKCHAIN *myblockchain, const char *wild)
+{
+  return myblockchain_list_tables(myblockchain, wild);
+}
+SYM_16(myblockchain_list_tables);
+
+
+my_bool STDCALL symver16_myblockchain_more_results(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_more_results(myblockchain);
+}
+SYM_16(myblockchain_more_results);
+
+
+int STDCALL symver16_myblockchain_next_result(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_next_result(myblockchain);
+}
+SYM_16(myblockchain_next_result);
+
+
+int STDCALL symver16_myblockchain_ping(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_ping(myblockchain);
+}
+SYM_16(myblockchain_ping);
+
+
+int STDCALL symver16_myblockchain_query(MYBLOCKCHAIN *myblockchain, const char *query)
+{
+  return myblockchain_query(myblockchain, query);
+}
+SYM_16(myblockchain_query);
+
+
+my_bool STDCALL symver16_myblockchain_read_query_result(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_read_query_result(myblockchain);
+}
+SYM_16(myblockchain_read_query_result);
+
+
+ulong STDCALL symver16_myblockchain_real_escape_string(MYBLOCKCHAIN *myblockchain, char *to,const char *from, ulong length)
+{
+  return myblockchain_real_escape_string(myblockchain, to, from, length);
+}
+SYM_16(myblockchain_real_escape_string);
+
+
+int STDCALL symver16_myblockchain_refresh(MYBLOCKCHAIN *myblockchain,uint options)
+{
+  return myblockchain_refresh(myblockchain, options);
+}
+SYM_16(myblockchain_refresh);
+
+
+my_bool STDCALL symver16_myblockchain_rollback(MYBLOCKCHAIN * myblockchain)
+{
+  return myblockchain_rollback(myblockchain);
+}
+SYM_16(myblockchain_rollback);
+
+
+MYBLOCKCHAIN_ROW_OFFSET STDCALL symver16_myblockchain_row_seek(MYBLOCKCHAIN_RES *result, MYBLOCKCHAIN_ROW_OFFSET row)
+{
+  return myblockchain_row_seek(result, row);
+}
+SYM_16(myblockchain_row_seek);
+
+
+MYBLOCKCHAIN_ROW_OFFSET STDCALL symver16_myblockchain_row_tell(MYBLOCKCHAIN_RES *res)
+{
+  return myblockchain_row_tell(res);
+}
+SYM_16(myblockchain_row_tell);
+
+
+void STDCALL symver16_myblockchain_server_end()
+{
+  return myblockchain_server_end();
+}
+SYM_16(myblockchain_server_end);
+
+
+int STDCALL symver16_myblockchain_server_init(int argc __attribute__((unused)), char **argv __attribute__((unused)), char **groups __attribute__((unused)))
+{
+  return myblockchain_server_init(argc, argv, groups);
+}
+SYM_16(myblockchain_server_init);
+
+
+void symver16_myblockchain_set_local_infile_default(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_set_local_infile_default(myblockchain);
+}
+SYM_16(myblockchain_set_local_infile_default);
+
+
+void symver16_myblockchain_set_local_infile_handler(MYBLOCKCHAIN *myblockchain, int (*local_infile_init)(void **, const char *, void *), int (*local_infile_read)(void *, char *, uint), void (*local_infile_end)(void *), int (*local_infile_error)(void *, char *, uint), void *userdata)
+{
+  return myblockchain_set_local_infile_handler(myblockchain, local_infile_init, local_infile_read, local_infile_end, local_infile_error, userdata);
+}
+SYM_16(myblockchain_set_local_infile_handler);
+
+
+int STDCALL symver16_myblockchain_set_server_option(MYBLOCKCHAIN *myblockchain, enum enum_myblockchain_set_option option)
+{
+  return myblockchain_set_server_option(myblockchain, option);
+}
+SYM_16(myblockchain_set_server_option);
+
+
+int STDCALL symver16_myblockchain_shutdown(MYBLOCKCHAIN *myblockchain, enum myblockchain_enum_shutdown_level shutdown_level)
+{
+  return myblockchain_shutdown(myblockchain, shutdown_level);
+}
+SYM_16(myblockchain_shutdown);
+
+
+const char *STDCALL symver16_myblockchain_sqlstate(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_sqlstate(myblockchain);
+}
+SYM_16(myblockchain_sqlstate);
+
+
+const char * STDCALL symver16_myblockchain_stat(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_stat(myblockchain);
+}
+SYM_16(myblockchain_stat);
+
+
+my_ulonglong STDCALL symver16_myblockchain_stmt_affected_rows(MYBLOCKCHAIN_STMT *stmt)
+{
+  return myblockchain_stmt_affected_rows(stmt);
+}
+SYM_16(myblockchain_stmt_affected_rows);
+
+
+my_bool STDCALL symver16_myblockchain_stmt_attr_get(MYBLOCKCHAIN_STMT *stmt, enum enum_stmt_attr_type attr_type, void *value)
+{
+  return myblockchain_stmt_attr_get(stmt, attr_type, value);
+}
+SYM_16(myblockchain_stmt_attr_get);
+
+
+my_bool STDCALL symver16_myblockchain_stmt_attr_set(MYBLOCKCHAIN_STMT *stmt, enum enum_stmt_attr_type attr_type, const void *value)
+{
+  return myblockchain_stmt_attr_set(stmt, attr_type, value);
+}
+SYM_16(myblockchain_stmt_attr_set);
+
+
+my_bool STDCALL symver16_myblockchain_stmt_bind_param(MYBLOCKCHAIN_STMT *stmt, MYBLOCKCHAIN_BIND *my_bind)
+{
+  return myblockchain_stmt_bind_param(stmt, my_bind);
+}
+SYM_16(myblockchain_stmt_bind_param);
+
+
+my_bool STDCALL symver16_myblockchain_stmt_bind_result(MYBLOCKCHAIN_STMT *stmt, MYBLOCKCHAIN_BIND *my_bind)
+{
+  return myblockchain_stmt_bind_result(stmt, my_bind);
+}
+SYM_16(myblockchain_stmt_bind_result);
+
+
+my_bool STDCALL symver16_myblockchain_stmt_close(MYBLOCKCHAIN_STMT *stmt)
+{
+  return myblockchain_stmt_close(stmt);
+}
+SYM_16(myblockchain_stmt_close);
+
+
+void STDCALL symver16_myblockchain_stmt_data_seek(MYBLOCKCHAIN_STMT *stmt, my_ulonglong row)
+{
+  return myblockchain_stmt_data_seek(stmt, row);
+}
+SYM_16(myblockchain_stmt_data_seek);
+
+
+uint STDCALL symver16_myblockchain_stmt_errno(MYBLOCKCHAIN_STMT * stmt)
+{
+  return myblockchain_stmt_errno(stmt);
+}
+SYM_16(myblockchain_stmt_errno);
+
+
+const char *STDCALL symver16_myblockchain_stmt_error(MYBLOCKCHAIN_STMT * stmt)
+{
+  return myblockchain_stmt_error(stmt);
+}
+SYM_16(myblockchain_stmt_error);
+
+
+int STDCALL symver16_myblockchain_stmt_execute(MYBLOCKCHAIN_STMT *stmt)
+{
+  return myblockchain_stmt_execute(stmt);
+}
+SYM_16(myblockchain_stmt_execute);
+
+
+int STDCALL symver16_myblockchain_stmt_fetch(MYBLOCKCHAIN_STMT *stmt)
+{
+  return myblockchain_stmt_fetch(stmt);
+}
+SYM_16(myblockchain_stmt_fetch);
+
+
+int STDCALL symver16_myblockchain_stmt_fetch_column(MYBLOCKCHAIN_STMT *stmt, MYBLOCKCHAIN_BIND *my_bind, uint column, ulong offset)  
+{
+  return myblockchain_stmt_fetch_column(stmt, my_bind, column, offset);
+}
+SYM_16(myblockchain_stmt_fetch_column);
+
+
+unsigned int STDCALL symver16_myblockchain_stmt_field_count(MYBLOCKCHAIN_STMT *stmt)
+{
+  return myblockchain_stmt_field_count(stmt);
+}
+SYM_16(myblockchain_stmt_field_count);
+
+
+my_bool STDCALL symver16_myblockchain_stmt_free_result(MYBLOCKCHAIN_STMT *stmt)
+{
+  return myblockchain_stmt_free_result(stmt);
+}
+SYM_16(myblockchain_stmt_free_result);
+
+
+MYBLOCKCHAIN_STMT * STDCALL symver16_myblockchain_stmt_init(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_stmt_init(myblockchain);
+}
+SYM_16(myblockchain_stmt_init);
+
+
+my_ulonglong STDCALL symver16_myblockchain_stmt_insert_id(MYBLOCKCHAIN_STMT *stmt)
+{
+  return myblockchain_stmt_insert_id(stmt);
+}
+SYM_16(myblockchain_stmt_insert_id);
+
+
+my_ulonglong STDCALL symver16_myblockchain_stmt_num_rows(MYBLOCKCHAIN_STMT *stmt)
+{
+  return myblockchain_stmt_num_rows(stmt);
+}
+SYM_16(myblockchain_stmt_num_rows);
+
+
+ulong STDCALL symver16_myblockchain_stmt_param_count(MYBLOCKCHAIN_STMT * stmt)
+{
+  return myblockchain_stmt_param_count(stmt);
+}
+SYM_16(myblockchain_stmt_param_count);
+
+
+MYBLOCKCHAIN_RES * STDCALL symver16_myblockchain_stmt_param_metadata(MYBLOCKCHAIN_STMT *stmt)
+{
+  return myblockchain_stmt_param_metadata(stmt);
+}
+SYM_16(myblockchain_stmt_param_metadata);
+
+
+int STDCALL symver16_myblockchain_stmt_prepare(MYBLOCKCHAIN_STMT *stmt, const char *query, ulong length)
+{
+  return myblockchain_stmt_prepare(stmt, query, length);
+}
+SYM_16(myblockchain_stmt_prepare);
+
+
+my_bool STDCALL symver16_myblockchain_stmt_reset(MYBLOCKCHAIN_STMT *stmt)
+{
+  return myblockchain_stmt_reset(stmt);
+}
+SYM_16(myblockchain_stmt_reset);
+
+
+MYBLOCKCHAIN_RES * STDCALL symver16_myblockchain_stmt_result_metadata(MYBLOCKCHAIN_STMT *stmt)
+{
+  return myblockchain_stmt_result_metadata(stmt);
+}
+SYM_16(myblockchain_stmt_result_metadata);
+
+
+MYBLOCKCHAIN_ROW_OFFSET STDCALL symver16_myblockchain_stmt_row_seek(MYBLOCKCHAIN_STMT *stmt, MYBLOCKCHAIN_ROW_OFFSET row)
+{
+  return myblockchain_stmt_row_seek(stmt, row);
+}
+SYM_16(myblockchain_stmt_row_seek);
+
+
+MYBLOCKCHAIN_ROW_OFFSET STDCALL symver16_myblockchain_stmt_row_tell(MYBLOCKCHAIN_STMT *stmt)
+{
+  return myblockchain_stmt_row_tell(stmt);
+}
+SYM_16(myblockchain_stmt_row_tell);
+
+
+my_bool STDCALL symver16_myblockchain_stmt_send_long_data(MYBLOCKCHAIN_STMT *stmt, uint param_number, const char *data, ulong length)
+{
+  return myblockchain_stmt_send_long_data(stmt, param_number, data, length);
+}
+SYM_16(myblockchain_stmt_send_long_data);
+
+
+const char *STDCALL symver16_myblockchain_stmt_sqlstate(MYBLOCKCHAIN_STMT * stmt)
+{
+  return myblockchain_stmt_sqlstate(stmt);
+}
+SYM_16(myblockchain_stmt_sqlstate);
+
+
+int STDCALL symver16_myblockchain_stmt_store_result(MYBLOCKCHAIN_STMT *stmt)
+{
+  return myblockchain_stmt_store_result(stmt);
+}
+SYM_16(myblockchain_stmt_store_result);
+
+
+void STDCALL symver16_myblockchain_thread_end()
+{
+  return myblockchain_thread_end();
+}
+SYM_16(myblockchain_thread_end);
+
+
+ulong STDCALL symver16_myblockchain_thread_id(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_thread_id(myblockchain);
+}
+SYM_16(myblockchain_thread_id);
+
+
+my_bool STDCALL symver16_myblockchain_thread_init()
+{
+  return myblockchain_thread_init();
+}
+SYM_16(myblockchain_thread_init);
+
+
+uint STDCALL symver16_myblockchain_thread_safe(void)
+{
+  return myblockchain_thread_safe();
+}
+SYM_16(myblockchain_thread_safe);
+
+
+MYBLOCKCHAIN_RES * STDCALL symver16_myblockchain_use_result(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_use_result(myblockchain);
+}
+SYM_16(myblockchain_use_result);
+
+
+uint STDCALL symver16_myblockchain_warning_count(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_warning_count(myblockchain);
+}
+SYM_16(myblockchain_warning_count);
+
+/*****/
+
+MYBLOCKCHAIN * STDCALL symver16_myblockchain_real_connect(MYBLOCKCHAIN *myblockchain,const char *host, const char *user, const char *passwd, const char *db, uint port, const char *unix_socket,ulong client_flag)
+{
+  return myblockchain_real_connect(myblockchain, host, user, passwd, db, port, unix_socket, client_flag);
+}
+SYM_16(myblockchain_real_connect);
+
+/*****/
+
+my_bool symver16_my_init(void)
+{
+  return my_init();
+}
+SYM_16(my_init);
+
+#endif
diff -rup old/libmyblockchain/libmyblockchain.ver.in new/libmyblockchain/libmyblockchain.ver.in
--- old/libmyblockchain/libmyblockchain.ver.in	2013-11-04 20:15:10.000000000 +0100
+++ new/libmyblockchain/libmyblockchain.ver.in	2014-01-14 12:10:27.148374504 +0100
@@ -1 +1,136 @@
-libmyblockchainclient_@SHARED_LIB_MAJOR_VERSION@ { global: *; };
+libmyblockchainclient_16
+{
+  local:
+    symver16_*;
+};
+
+libmyblockchainclient_18
+{
+  global:
+    my_init;
+    myodbc_remove_escape;
+    myblockchain_affected_rows;
+    myblockchain_autocommit;
+    myblockchain_change_user;
+    myblockchain_character_set_name;
+    myblockchain_close;
+    myblockchain_commit;
+    myblockchain_data_seek;
+    myblockchain_debug;
+    myblockchain_dump_debug_info;
+    myblockchain_embedded;
+    myblockchain_eof;
+    myblockchain_errno;
+    myblockchain_error;
+    myblockchain_escape_string;
+    myblockchain_fetch_field;
+    myblockchain_fetch_field_direct;
+    myblockchain_fetch_fields;
+    myblockchain_fetch_lengths;
+    myblockchain_fetch_row;
+    myblockchain_field_count;
+    myblockchain_field_seek;
+    myblockchain_field_tell;
+    myblockchain_free_result;
+    myblockchain_get_character_set_info;
+    myblockchain_get_client_info;
+    myblockchain_get_client_version;
+    myblockchain_get_host_info;
+    myblockchain_get_parameters;
+    myblockchain_get_proto_info;
+    myblockchain_get_server_info;
+    myblockchain_get_server_version;
+    myblockchain_get_ssl_cipher;
+    myblockchain_hex_string;
+    myblockchain_info;
+    myblockchain_init;
+    myblockchain_insert_id;
+    myblockchain_kill;
+    myblockchain_list_dbs;
+    myblockchain_list_fields;
+    myblockchain_list_processes;
+    myblockchain_list_tables;
+    myblockchain_more_results;
+    myblockchain_next_result;
+    myblockchain_num_fields;
+    myblockchain_num_rows;
+    myblockchain_options;
+    myblockchain_ping;
+    myblockchain_query;
+    myblockchain_read_query_result;
+    myblockchain_real_connect;
+    myblockchain_real_escape_string;
+    myblockchain_real_query;
+    myblockchain_refresh;
+    myblockchain_rollback;
+    myblockchain_row_seek;
+    myblockchain_row_tell;
+    myblockchain_select_db;
+    myblockchain_send_query;
+    myblockchain_server_end;
+    myblockchain_server_init;
+    myblockchain_set_character_set;
+    myblockchain_set_local_infile_default;
+    myblockchain_set_local_infile_handler;
+    myblockchain_set_server_option;
+    myblockchain_shutdown;
+    myblockchain_sqlstate;
+    myblockchain_ssl_set;
+    myblockchain_stat;
+    myblockchain_stmt_affected_rows;
+    myblockchain_stmt_attr_get;
+    myblockchain_stmt_attr_set;
+    myblockchain_stmt_bind_param;
+    myblockchain_stmt_bind_result;
+    myblockchain_stmt_close;
+    myblockchain_stmt_data_seek;
+    myblockchain_stmt_errno;
+    myblockchain_stmt_error;
+    myblockchain_stmt_execute;
+    myblockchain_stmt_fetch;
+    myblockchain_stmt_fetch_column;
+    myblockchain_stmt_field_count;
+    myblockchain_stmt_free_result;
+    myblockchain_stmt_init;
+    myblockchain_stmt_insert_id;
+    myblockchain_stmt_num_rows;
+    myblockchain_stmt_param_count;
+    myblockchain_stmt_param_metadata;
+    myblockchain_stmt_prepare;
+    myblockchain_stmt_reset;
+    myblockchain_stmt_result_metadata;
+    myblockchain_stmt_row_seek;
+    myblockchain_stmt_row_tell;
+    myblockchain_stmt_send_long_data;
+    myblockchain_stmt_sqlstate;
+    myblockchain_stmt_store_result;
+    myblockchain_store_result;
+    myblockchain_thread_end;
+    myblockchain_thread_id;
+    myblockchain_thread_init;
+    myblockchain_thread_safe;
+    myblockchain_use_result;
+    myblockchain_warning_count;
+
+    free_defaults;
+    handle_options;
+    load_defaults;
+    my_print_help;
+
+    #my_make_scrambled_password;
+    THR_KEY_mysys;
+
+    myblockchain_client_find_plugin;
+    myblockchain_client_register_plugin;
+    myblockchain_load_plugin;
+    myblockchain_load_plugin_v;
+    myblockchain_plugin_options;
+    myblockchain_stmt_next_result;
+
+    #myblockchain_default_charset_info;
+    myblockchain_get_charset;
+    myblockchain_get_charset_by_csname;
+    myblockchain_net_realloc;
+    #myblockchain_client_errors;
+    *;
+} libmyblockchainclient_16;
diff -rup old/mysys/charset.c new/mysys/charset.c
--- old/mysys/charset.c	2013-11-04 20:15:10.000000000 +0100
+++ new/mysys/charset.c	2014-01-14 12:10:27.197377417 +0100
@@ -1040,3 +1040,20 @@ size_t escape_quotes_for_myblockchain(CHARSET_I
   *to= 0;
   return overflow ? (ulong)~0 : (ulong) (to - to_start);
 }
+
+#ifndef EMBEDDED_LIBRARY
+
+// Hack to provide Fedora symbols
+
+CHARSET_INFO *myblockchain_get_charset(uint cs_number, myf flags)
+{
+  return get_charset(cs_number, flags);
+}
+
+
+CHARSET_INFO * myblockchain_get_charset_by_csname(const char *cs_name, uint cs_flags, myf flags)
+{
+  return get_charset_by_csname(cs_name, cs_flags, flags);
+}
+
+#endif
diff -rup old/sql/net_serv.cc new/sql/net_serv.cc
--- old/sql/net_serv.cc	2013-11-04 20:15:10.000000000 +0100
+++ new/sql/net_serv.cc	2014-01-14 12:10:27.252380688 +0100
@@ -1047,3 +1047,15 @@ void my_net_set_write_timeout(NET *net, 
   DBUG_VOID_RETURN;
 }
 
+#ifndef EMBEDDED_LIBRARY
+C_MODE_START
+
+// Hack to provide Fedora symbols
+
+my_bool myblockchain_net_realloc(NET *net, size_t length)
+{
+  return net_realloc(net, length);
+}
+
+C_MODE_END
+#endif
diff -rup old/sql/password.c new/sql/password.c
--- old/sql/password.c	2013-11-04 20:15:10.000000000 +0100
+++ new/sql/password.c	2014-01-14 12:10:27.309384078 +0100
@@ -584,3 +584,16 @@ void make_password_from_salt(char *to, c
   octet2hex(to, (const char*) hash_stage2, SHA1_HASH_SIZE);
 }
 
+#ifndef EMBEDDED_LIBRARY
+
+// Hack to provide both libmyblockchainclient_16 and libmyblockchainclient_18 symbol versions
+
+#define SYM_16(_exportedsym) __asm__(".symver symver16_" #_exportedsym "," #_exportedsym "@libmyblockchainclient_16")
+
+void symver16_my_make_scrambled_password(char *to, const char *password, size_t pass_len)
+{
+  my_make_scrambled_password(to, password, pass_len);
+}
+SYM_16(my_make_scrambled_password);
+
+#endif
diff -rup old/sql-common/client.c new/sql-common/client.c
--- old/sql-common/client.c	2013-11-04 20:15:10.000000000 +0100
+++ new/sql-common/client.c	2014-01-14 12:10:27.199377537 +0100
@@ -4847,3 +4847,136 @@ static int clear_password_auth_client(MY
 
   return res ? CR_ERROR : CR_OK;
 }
+
+#ifndef EMBEDDED_LIBRARY
+
+// Hack to provide both libmyblockchainclient_16 and libmyblockchainclient_18 symbol versions
+
+#define SYM_16(_exportedsym) __asm__(".symver symver16_" #_exportedsym "," #_exportedsym "@libmyblockchainclient_16")
+
+void STDCALL symver16_myblockchain_close(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_close(myblockchain);
+}
+SYM_16(myblockchain_close);
+
+
+uint STDCALL symver16_myblockchain_errno(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_errno(myblockchain);
+}
+SYM_16(myblockchain_errno);
+
+
+const char * STDCALL symver16_myblockchain_error(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_error(myblockchain);
+}
+SYM_16(myblockchain_error);
+
+
+ulong * STDCALL symver16_myblockchain_fetch_lengths(MYBLOCKCHAIN_RES *res)
+{
+  return myblockchain_fetch_lengths(res);
+}
+SYM_16(myblockchain_fetch_lengths);
+
+
+MYBLOCKCHAIN_ROW STDCALL symver16_myblockchain_fetch_row(MYBLOCKCHAIN_RES *res)
+{
+  return myblockchain_fetch_row(res);
+}
+SYM_16(myblockchain_fetch_row);
+
+
+void STDCALL symver16_myblockchain_free_result(MYBLOCKCHAIN_RES *result)
+{
+  return myblockchain_free_result(result);
+}
+SYM_16(myblockchain_free_result);
+
+
+ulong STDCALL symver16_myblockchain_get_server_version(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_get_server_version(myblockchain);
+}
+SYM_16(myblockchain_get_server_version);
+
+
+const char * STDCALL symver16_myblockchain_get_ssl_cipher(MYBLOCKCHAIN *myblockchain __attribute__((unused)))
+{
+  return myblockchain_get_ssl_cipher(myblockchain);
+}
+SYM_16(myblockchain_get_ssl_cipher);
+
+
+MYBLOCKCHAIN * STDCALL symver16_myblockchain_init(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_init(myblockchain);
+}
+SYM_16(myblockchain_init);
+
+
+unsigned int STDCALL symver16_myblockchain_num_fields(MYBLOCKCHAIN_RES *res)
+{
+  return myblockchain_num_fields(res);
+}
+SYM_16(myblockchain_num_fields);
+
+
+my_ulonglong STDCALL symver16_myblockchain_num_rows(MYBLOCKCHAIN_RES *res)
+{
+  return myblockchain_num_rows(res);
+}
+SYM_16(myblockchain_num_rows);
+
+
+int STDCALL symver16_myblockchain_options(MYBLOCKCHAIN *myblockchain,enum myblockchain_option option, const void *arg)
+{
+  return myblockchain_options(myblockchain, option, arg);
+}
+SYM_16(myblockchain_options);
+
+
+int STDCALL symver16_myblockchain_real_query(MYBLOCKCHAIN *myblockchain, const char *query, ulong length)
+{
+  return myblockchain_real_query(myblockchain, query, length);
+}
+SYM_16(myblockchain_real_query);
+
+
+int STDCALL symver16_myblockchain_select_db(MYBLOCKCHAIN *myblockchain, const char *db)
+{
+  return myblockchain_select_db(myblockchain, db);
+}
+SYM_16(myblockchain_select_db);
+
+
+int STDCALL symver16_myblockchain_send_query(MYBLOCKCHAIN* myblockchain, const char* query, ulong length)
+{
+  return myblockchain_send_query(myblockchain, query, length);
+}
+SYM_16(myblockchain_send_query);
+
+
+int STDCALL symver16_myblockchain_set_character_set(MYBLOCKCHAIN *myblockchain, const char *cs_name)
+{
+  return myblockchain_set_character_set(myblockchain, cs_name);
+}
+SYM_16(myblockchain_set_character_set);
+
+
+my_bool STDCALL symver16_myblockchain_ssl_set(MYBLOCKCHAIN *myblockchain __attribute__((unused)), const char *key __attribute__((unused)), const char *cert __attribute__((unused)), const char *ca __attribute__((unused)), const char *capath __attribute__((unused)), const char *cipher __attribute__((unused)))
+{
+  return myblockchain_ssl_set(myblockchain, key, cert, ca, capath, cipher);
+}
+SYM_16(myblockchain_ssl_set);
+
+
+MYBLOCKCHAIN_RES * STDCALL symver16_myblockchain_store_result(MYBLOCKCHAIN *myblockchain)
+{
+  return myblockchain_store_result(myblockchain);
+}
+SYM_16(myblockchain_store_result);
+
+#endif
