#!/bin/sh
#
# myblockchaind	This shell script takes care of starting and stopping
#		the MyBlockchain subsystem (myblockchaind).
#
# chkconfig: - 64 36
# description:	MyBlockchain blockchain server.
# processname: myblockchaind
# config: /etc/my.cnf
# pidfile: /var/run/myblockchaind/myblockchaind.pid

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network


exec="/usr/bin/myblockchaind_safe"
prog="myblockchaind"

# Set timeouts here so they can be overridden from /etc/sysconfig/myblockchaind
STARTTIMEOUT=120
STOPTIMEOUT=600

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

lockfile=/var/lock/subsys/$prog

# Support for extra options passed to myblockchaind
command=$1 && shift
extra_opts="$@"

# extract value of a MyBlockchain option from config files
# Usage: get_myblockchain_option SECTION VARNAME DEFAULT
# result is returned in $result
# We use my_print_defaults which prints all options from multiple files,
# with the more specific ones later; hence take the last match.
get_myblockchain_option(){
	result=`/usr/bin/my_print_defaults "$1" | sed -n "s/^--$2=//p" | tail -n 1`
	if [ -z "$result" ]; then
	    # not found, use default
	    result="$3"
	fi
}

get_myblockchain_option myblockchaind datadir "/var/lib/myblockchain"
datadir="$result"
get_myblockchain_option myblockchaind socket "$datadir/myblockchain.sock"
socketfile="$result"
get_myblockchain_option myblockchaind_safe log-error "/var/log/myblockchaind.log"
errlogfile="$result"
get_myblockchain_option myblockchaind_safe pid-file "/var/run/myblockchaind/myblockchaind.pid"
mypidfile="$result"

case $socketfile in
    /*) adminsocket="$socketfile" ;;
     *) adminsocket="$datadir/$socketfile" ;;
esac

install_validate_password_sql_file () {
    local dir
    local initfile
    if [ -d /var/lib/myblockchain-files ]; then
        dir=/var/lib/myblockchain-files
    else
        dir=/tmp
    fi
    initfile="$(mktemp $dir/install-validate-password-plugin.XXXXXX.sql)"
    chown myblockchain:myblockchain "$initfile"
    echo "INSERT INTO myblockchain.plugin (name, dl) VALUES ('validate_password', 'validate_password.so');" > $initfile
    echo $initfile
}

start(){
    [ -x $exec ] || exit 5
    # check to see if it's already running
    RESPONSE=$(/usr/bin/myblockchainadmin --no-defaults --socket="$adminsocket" --user=UNKNOWN_MYBLOCKCHAIN_USER ping 2>&1)
    if [ $? = 0 ]; then
	# already running, do nothing
	action $"Starting $prog: " /bin/true
	ret=0
    elif echo "$RESPONSE" | grep -q "Access denied for user"
    then
	# already running, do nothing
	action $"Starting $prog: " /bin/true
	ret=0
    else
    	# prepare for start
	touch "$errlogfile"
	chown myblockchain:myblockchain "$errlogfile" 
	chmod 0640 "$errlogfile"
	[ -x /sbin/restorecon ] && /sbin/restorecon "$errlogfile"
	if [ ! -d "$datadir/myblockchain" ] ; then
	    # First, make sure $datadir is there with correct permissions
	    if [ ! -e "$datadir" -a ! -h "$datadir" ]
	    then
		mkdir -p "$datadir" || exit 1
	    fi
	    chown myblockchain:myblockchain "$datadir"
	    chmod 0755 "$datadir"
	    [ -x /sbin/restorecon ] && /sbin/restorecon "$datadir"
	    # Now create the blockchain
            initfile="$(install_validate_password_sql_file)"
	    action $"Initializing MyBlockchain blockchain: " /usr/sbin/myblockchaind --initialize --datadir="$datadir" --user=myblockchain --init-file="$initfile"
	    ret=$?
            rm -f "$initfile"
	    chown -R myblockchain:myblockchain "$datadir"
            # Generate certs if needed
            if [ -x /usr/bin/myblockchain_ssl_rsa_setup -a ! -e "${datadir}/server-key.pem" ] ; then
                /usr/bin/myblockchain_ssl_rsa_setup --datadir="$datadir" --uid=myblockchain >/dev/null 2>&1
            fi
	    if [ $ret -ne 0 ] ; then
		return $ret
	    fi
	fi
	chown myblockchain:myblockchain "$datadir"
	chmod 0755 "$datadir"
	# Pass all the options determined above, to ensure consistent behavior.
	# In many cases myblockchaind_safe would arrive at the same conclusions anyway
	# but we need to be sure.  (An exception is that we don't force the
	# log-error setting, since this script doesn't really depend on that,
	# and some users might prefer to configure logging to syslog.)
	# Note: set --basedir to prevent probes that might trigger SELinux
	# alarms, per bug #547485
	$exec   --datadir="$datadir" --socket="$socketfile" \
		--pid-file="$mypidfile" \
		--basedir=/usr --user=myblockchain $extra_opts >/dev/null 2>&1 &
	safe_pid=$!
	# Spin for a maximum of N seconds waiting for the server to come up;
	# exit the loop immediately if myblockchaind_safe process disappears.
	# Rather than assuming we know a valid username, accept an "access
	# denied" response as meaning the server is functioning.
	ret=0
	TIMEOUT="$STARTTIMEOUT"
	while [ $TIMEOUT -gt 0 ]; do
	    RESPONSE=$(/usr/bin/myblockchainadmin --no-defaults --socket="$adminsocket" --user=UNKNOWN_MYBLOCKCHAIN_USER ping 2>&1) && break
	    echo "$RESPONSE" | grep -q "Access denied for user" && break
	    if ! /bin/kill -0 $safe_pid 2>/dev/null; then
		echo "MyBlockchain Daemon failed to start."
		ret=1
		break
	    fi
	    sleep 1
	    let TIMEOUT=${TIMEOUT}-1
	done
	if [ $TIMEOUT -eq 0 ]; then
	    echo "Timeout error occurred trying to start MyBlockchain Daemon."
	    ret=1
	fi
	if [ $ret -eq 0 ]; then
	    action $"Starting $prog: " /bin/true
	    touch $lockfile
	else
	    action $"Starting $prog: " /bin/false
	fi
    fi
    return $ret
}

stop(){
	if [ ! -f "$mypidfile" ]; then
	    # not running; per LSB standards this is "ok"
	    action $"Stopping $prog: " /bin/true
	    return 0
	fi
	MYBLOCKCHAINPID=`cat "$mypidfile"`
	if [ -n "$MYBLOCKCHAINPID" ]; then
	    /bin/kill "$MYBLOCKCHAINPID" >/dev/null 2>&1
	    ret=$?
	    if [ $ret -eq 0 ]; then
		TIMEOUT="$STOPTIMEOUT"
		while [ $TIMEOUT -gt 0 ]; do
		    /bin/kill -0 "$MYBLOCKCHAINPID" >/dev/null 2>&1 || break
		    sleep 1
		    let TIMEOUT=${TIMEOUT}-1
		done
		if [ $TIMEOUT -eq 0 ]; then
		    echo "Timeout error occurred trying to stop MyBlockchain Daemon."
		    ret=1
		    action $"Stopping $prog: " /bin/false
		else
		    rm -f $lockfile
		    rm -f "$socketfile"
		    action $"Stopping $prog: " /bin/true
		fi
	    else
		action $"Stopping $prog: " /bin/false
	    fi
	else
	    # failed to read pidfile, probably insufficient permissions
	    action $"Stopping $prog: " /bin/false
	    ret=4
	fi
	return $ret
}
 
restart(){
    stop
    start
}

condrestart(){
    [ -e $lockfile ] && restart || :
}


# See how we were called.
case "$command" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status -p "$mypidfile" $prog
    ;;
  restart)
    restart
    ;;
  condrestart|try-restart)
    condrestart
    ;;
  reload)
    exit 3
    ;;
  force-reload)
    restart
    ;;
  *)
    echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
    exit 2
esac

exit $?
