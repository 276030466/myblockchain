SET @old_log_bin_trust_function_creators= @@global.log_bin_trust_function_creators;
SET GLOBAL log_bin_trust_function_creators = 1;
set @orig_sql_mode_session= @@SESSION.sql_mode;
set @orig_sql_mode_global= @@GLOBAL.sql_mode;
set GLOBAL sql_mode= (select replace(@@GLOBAL.sql_mode,'NO_AUTO_CREATE_USER',''));
Warnings:
Warning	3090	Changing sql mode 'NO_AUTO_CREATE_USER' is deprecated. It will be removed in a future release.
set SESSION sql_mode= (select replace(@@SESSION.sql_mode,'NO_AUTO_CREATE_USER',''));
Warnings:
Warning	3090	Changing sql mode 'NO_AUTO_CREATE_USER' is deprecated. It will be removed in a future release.
drop table if exists t1;
drop blockchain if exists myblockchaintest;
call mtr.add_suppression("Did not write failed .* ");
SET NAMES binary;
delete from myblockchain.user where user='myblockchaintest_1';
delete from myblockchain.db where user='myblockchaintest_1';
flush privileges;
grant select on myblockchaintest.* to myblockchaintest_1@localhost require cipher "EDH-RSA-DES-CBC3-SHA";
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT SELECT ON `myblockchaintest`.* TO 'myblockchaintest_1'@'localhost'
grant delete on myblockchaintest.* to myblockchaintest_1@localhost;
select * from myblockchain.user where user="myblockchaintest_1";
Host	localhost
User	myblockchaintest_1
Select_priv	N
Insert_priv	N
Update_priv	N
Delete_priv	N
Create_priv	N
Drop_priv	N
Reload_priv	N
Shutdown_priv	N
Process_priv	N
File_priv	N
Grant_priv	N
References_priv	N
Index_priv	N
Alter_priv	N
Show_db_priv	N
Super_priv	N
Create_tmp_table_priv	N
Lock_tables_priv	N
Execute_priv	N
Repl_slave_priv	N
Repl_client_priv	N
Create_view_priv	N
Show_view_priv	N
Create_routine_priv	N
Alter_routine_priv	N
Create_user_priv	N
Event_priv	N
Trigger_priv	N
Create_tablespace_priv	N
ssl_type	SPECIFIED
ssl_cipher	EDH-RSA-DES-CBC3-SHA
x509_issuer	
x509_subject	
max_questions	0
max_updates	0
max_connections	0
max_user_connections	0
plugin	myblockchain_native_password
authentication_string	
password_expired	N
password_last_changed	DTVALUE
password_lifetime	NULL
account_locked	N
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT SELECT, DELETE ON `myblockchaintest`.* TO 'myblockchaintest_1'@'localhost'
revoke delete on myblockchaintest.* from myblockchaintest_1@localhost;
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT SELECT ON `myblockchaintest`.* TO 'myblockchaintest_1'@'localhost'
grant select on myblockchaintest.* to myblockchaintest_1@localhost require NONE;
Warnings:
Warning	1287	Using GRANT statement to modify existing user's properties other than privileges is deprecated and will be removed in future release. Use ALTER USER statement for this operation.
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT SELECT ON `myblockchaintest`.* TO 'myblockchaintest_1'@'localhost'
grant USAGE on myblockchaintest.* to myblockchaintest_1@localhost require cipher "EDH-RSA-DES-CBC3-SHA" AND SUBJECT "testsubject" ISSUER "MyBlockchain AB";
Warnings:
Warning	1287	Using GRANT statement to modify existing user's properties other than privileges is deprecated and will be removed in future release. Use ALTER USER statement for this operation.
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT SELECT ON `myblockchaintest`.* TO 'myblockchaintest_1'@'localhost'
revoke all privileges on myblockchaintest.* from myblockchaintest_1@localhost;
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
delete from myblockchain.user where user='myblockchaintest_1';
flush privileges;
delete from myblockchain.user where user='myblockchaintest_1';
flush privileges;
grant usage on *.* to myblockchaintest_1@localhost with max_queries_per_hour 10;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
select * from myblockchain.user where user="myblockchaintest_1";
Host	localhost
User	myblockchaintest_1
Select_priv	N
Insert_priv	N
Update_priv	N
Delete_priv	N
Create_priv	N
Drop_priv	N
Reload_priv	N
Shutdown_priv	N
Process_priv	N
File_priv	N
Grant_priv	N
References_priv	N
Index_priv	N
Alter_priv	N
Show_db_priv	N
Super_priv	N
Create_tmp_table_priv	N
Lock_tables_priv	N
Execute_priv	N
Repl_slave_priv	N
Repl_client_priv	N
Create_view_priv	N
Show_view_priv	N
Create_routine_priv	N
Alter_routine_priv	N
Create_user_priv	N
Event_priv	N
Trigger_priv	N
Create_tablespace_priv	N
ssl_type	
ssl_cipher	
x509_issuer	
x509_subject	
max_questions	10
max_updates	0
max_connections	0
max_user_connections	0
plugin	myblockchain_native_password
authentication_string	
password_expired	N
password_last_changed	DTVALUE
password_lifetime	NULL
account_locked	N
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
grant usage on *.* to myblockchaintest_1@localhost with max_updates_per_hour 20 max_connections_per_hour 30;
Warnings:
Warning	1287	Using GRANT statement to modify existing user's properties other than privileges is deprecated and will be removed in future release. Use ALTER USER statement for this operation.
select * from myblockchain.user where user="myblockchaintest_1";
Host	localhost
User	myblockchaintest_1
Select_priv	N
Insert_priv	N
Update_priv	N
Delete_priv	N
Create_priv	N
Drop_priv	N
Reload_priv	N
Shutdown_priv	N
Process_priv	N
File_priv	N
Grant_priv	N
References_priv	N
Index_priv	N
Alter_priv	N
Show_db_priv	N
Super_priv	N
Create_tmp_table_priv	N
Lock_tables_priv	N
Execute_priv	N
Repl_slave_priv	N
Repl_client_priv	N
Create_view_priv	N
Show_view_priv	N
Create_routine_priv	N
Alter_routine_priv	N
Create_user_priv	N
Event_priv	N
Trigger_priv	N
Create_tablespace_priv	N
ssl_type	
ssl_cipher	
x509_issuer	
x509_subject	
max_questions	10
max_updates	20
max_connections	30
max_user_connections	0
plugin	myblockchain_native_password
authentication_string	
password_expired	N
password_last_changed	DTVALUE
password_lifetime	NULL
account_locked	N
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
flush privileges;
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
delete from myblockchain.user where user='myblockchaintest_1';
flush privileges;
grant CREATE TEMPORARY TABLES, LOCK TABLES on myblockchaintest.* to myblockchaintest_1@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT CREATE TEMPORARY TABLES, LOCK TABLES ON `myblockchaintest`.* TO 'myblockchaintest_1'@'localhost'
flush privileges;
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT CREATE TEMPORARY TABLES, LOCK TABLES ON `myblockchaintest`.* TO 'myblockchaintest_1'@'localhost'
revoke CREATE TEMPORARY TABLES on myblockchaintest.* from myblockchaintest_1@localhost;
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT LOCK TABLES ON `myblockchaintest`.* TO 'myblockchaintest_1'@'localhost'
grant ALL PRIVILEGES on myblockchaintest.* to myblockchaintest_1@localhost with GRANT OPTION;
flush privileges;
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT ALL PRIVILEGES ON `myblockchaintest`.* TO 'myblockchaintest_1'@'localhost' WITH GRANT OPTION
revoke LOCK TABLES, ALTER on myblockchaintest.* from myblockchaintest_1@localhost;
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, CREATE TEMPORARY TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER ON `myblockchaintest`.* TO 'myblockchaintest_1'@'localhost' WITH GRANT OPTION
revoke all privileges on myblockchaintest.* from myblockchaintest_1@localhost;
delete from myblockchain.user where user='myblockchaintest_1';
flush privileges;
grant usage on test.* to myblockchaintest_1@localhost with grant option;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT USAGE ON `myblockchaintest`.* TO 'myblockchaintest_1'@'localhost' WITH GRANT OPTION
GRANT USAGE ON `test`.* TO 'myblockchaintest_1'@'localhost' WITH GRANT OPTION
delete from myblockchain.user where user='myblockchaintest_1';
delete from myblockchain.db where user='myblockchaintest_1';
delete from myblockchain.tables_priv where user='myblockchaintest_1';
delete from myblockchain.columns_priv where user='myblockchaintest_1';
flush privileges;
show grants for myblockchaintest_1@localhost;
ERROR 42000: There is no such grant defined for user 'myblockchaintest_1' on host 'localhost'
create table t1 (a int);
GRANT select,update,insert on t1 to myblockchaintest_1@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
GRANT select (a), update (a),insert(a), references(a) on t1 to myblockchaintest_1@localhost;
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT SELECT, SELECT (a), INSERT, INSERT (a), UPDATE, UPDATE (a), REFERENCES (a) ON `test`.`t1` TO 'myblockchaintest_1'@'localhost'
select table_priv,column_priv from myblockchain.tables_priv where user="myblockchaintest_1";
table_priv	column_priv
Select,Insert,Update	Select,Insert,Update,References
REVOKE select (a), update on t1 from myblockchaintest_1@localhost;
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT SELECT, INSERT, INSERT (a), REFERENCES (a) ON `test`.`t1` TO 'myblockchaintest_1'@'localhost'
REVOKE select,update,insert,insert (a) on t1 from myblockchaintest_1@localhost;
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT REFERENCES (a) ON `test`.`t1` TO 'myblockchaintest_1'@'localhost'
GRANT select,references on t1 to myblockchaintest_1@localhost;
select table_priv,column_priv from myblockchain.tables_priv where user="myblockchaintest_1";
table_priv	column_priv
Select,References	References
grant all on test.* to myblockchaintest_3@localhost with grant option;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
revoke all on test.* from myblockchaintest_3@localhost;
show grants for myblockchaintest_3@localhost;
Grants for myblockchaintest_3@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_3'@'localhost'
GRANT USAGE ON `test`.* TO 'myblockchaintest_3'@'localhost' WITH GRANT OPTION
revoke grant option on test.* from myblockchaintest_3@localhost;
show grants for myblockchaintest_3@localhost;
Grants for myblockchaintest_3@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_3'@'localhost'
grant all on test.t1 to myblockchaintest_2@localhost with grant option;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
revoke all on test.t1 from myblockchaintest_2@localhost;
show grants for myblockchaintest_2@localhost;
Grants for myblockchaintest_2@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_2'@'localhost'
GRANT USAGE ON `test`.`t1` TO 'myblockchaintest_2'@'localhost' WITH GRANT OPTION
revoke grant option on test.t1 from myblockchaintest_2@localhost;
show grants for myblockchaintest_2@localhost;
Grants for myblockchaintest_2@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_2'@'localhost'
delete from myblockchain.user where user='myblockchaintest_1' or user="myblockchaintest_2" or user="myblockchaintest_3";
delete from myblockchain.db where user='myblockchaintest_1' or user="myblockchaintest_2" or user="myblockchaintest_3";
delete from myblockchain.tables_priv where user='myblockchaintest_1' or user="myblockchaintest_2" or user="myblockchaintest_3";
delete from myblockchain.columns_priv where user='myblockchaintest_1' or user="myblockchaintest_2" or user="myblockchaintest_3";
flush privileges;
drop table t1;
GRANT FILE on myblockchaintest.*  to myblockchaintest_1@localhost;
ERROR HY000: Incorrect usage of DB GRANT and GLOBAL PRIVILEGES
select 1;
1
1
insert ignore into myblockchain.user (host, user) values ('localhost', 'test11');
Warnings:
Warning	1364	Field 'ssl_cipher' doesn't have a default value
Warning	1364	Field 'x509_issuer' doesn't have a default value
Warning	1364	Field 'x509_subject' doesn't have a default value
insert into myblockchain.db (host, db, user, select_priv) values
('localhost', 'a%', 'test11', 'Y'), ('localhost', 'ab%', 'test11', 'Y');
alter table myblockchain.db order by db asc;
flush privileges;
show grants for test11@localhost;
Grants for test11@localhost
GRANT USAGE ON *.* TO 'test11'@'localhost'
GRANT SELECT ON `ab%`.* TO 'test11'@'localhost'
GRANT SELECT ON `a%`.* TO 'test11'@'localhost'
alter table myblockchain.db order by db desc;
flush privileges;
show grants for test11@localhost;
Grants for test11@localhost
GRANT USAGE ON *.* TO 'test11'@'localhost'
GRANT SELECT ON `ab%`.* TO 'test11'@'localhost'
GRANT SELECT ON `a%`.* TO 'test11'@'localhost'
delete from myblockchain.user where user='test11';
delete from myblockchain.db where user='test11';
create blockchain myblockchaintest1;
grant usage on myblockchaintest1.* to test6123 identified by 'magic123';
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
select host,db,user,select_priv,insert_priv from myblockchain.db where db="myblockchaintest1";
host	db	user	select_priv	insert_priv
delete from myblockchain.user where user='test6123';
drop blockchain myblockchaintest1;
create table t1 (a int);
grant ALL PRIVILEGES on *.* to drop_user2@localhost with GRANT OPTION;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
show grants for drop_user2@localhost;
Grants for drop_user2@localhost
GRANT ALL PRIVILEGES ON *.* TO 'drop_user2'@'localhost' WITH GRANT OPTION
revoke all privileges, grant option from drop_user2@localhost;
drop user drop_user2@localhost;
grant ALL PRIVILEGES on *.* to drop_user@localhost with GRANT OPTION;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
grant ALL PRIVILEGES on test.* to drop_user@localhost with GRANT OPTION;
grant select(a) on test.t1 to drop_user@localhost;
show grants for drop_user@localhost;
Grants for drop_user@localhost
GRANT ALL PRIVILEGES ON *.* TO 'drop_user'@'localhost' WITH GRANT OPTION
GRANT ALL PRIVILEGES ON `test`.* TO 'drop_user'@'localhost' WITH GRANT OPTION
GRANT SELECT (a) ON `test`.`t1` TO 'drop_user'@'localhost'
set sql_mode=ansi_quotes;
show grants for drop_user@localhost;
Grants for drop_user@localhost
GRANT ALL PRIVILEGES ON *.* TO 'drop_user'@'localhost' WITH GRANT OPTION
GRANT ALL PRIVILEGES ON "test".* TO 'drop_user'@'localhost' WITH GRANT OPTION
GRANT SELECT (a) ON "test"."t1" TO 'drop_user'@'localhost'
set sql_mode=default;
set sql_quote_show_create=0;
show grants for drop_user@localhost;
Grants for drop_user@localhost
GRANT ALL PRIVILEGES ON *.* TO 'drop_user'@'localhost' WITH GRANT OPTION
GRANT ALL PRIVILEGES ON test.* TO 'drop_user'@'localhost' WITH GRANT OPTION
GRANT SELECT (a) ON test.t1 TO 'drop_user'@'localhost'
set sql_mode="ansi_quotes";
show grants for drop_user@localhost;
Grants for drop_user@localhost
GRANT ALL PRIVILEGES ON *.* TO 'drop_user'@'localhost' WITH GRANT OPTION
GRANT ALL PRIVILEGES ON test.* TO 'drop_user'@'localhost' WITH GRANT OPTION
GRANT SELECT (a) ON test.t1 TO 'drop_user'@'localhost'
set sql_quote_show_create=1;
show grants for drop_user@localhost;
Grants for drop_user@localhost
GRANT ALL PRIVILEGES ON *.* TO 'drop_user'@'localhost' WITH GRANT OPTION
GRANT ALL PRIVILEGES ON "test".* TO 'drop_user'@'localhost' WITH GRANT OPTION
GRANT SELECT (a) ON "test"."t1" TO 'drop_user'@'localhost'
set sql_mode="";
show grants for drop_user@localhost;
Grants for drop_user@localhost
GRANT ALL PRIVILEGES ON *.* TO 'drop_user'@'localhost' WITH GRANT OPTION
GRANT ALL PRIVILEGES ON `test`.* TO 'drop_user'@'localhost' WITH GRANT OPTION
GRANT SELECT (a) ON `test`.`t1` TO 'drop_user'@'localhost'
revoke all privileges, grant option from drop_user@localhost;
show grants for drop_user@localhost;
Grants for drop_user@localhost
GRANT USAGE ON *.* TO 'drop_user'@'localhost'
drop user drop_user@localhost;
revoke all privileges, grant option from drop_user@localhost;
ERROR HY000: Can't revoke all privileges for one or more of the requested users
grant select(a) on test.t1 to drop_user1@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
grant select on test.t1 to drop_user2@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
grant select on test.* to drop_user3@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
grant select on *.* to drop_user4@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
drop user drop_user1@localhost, drop_user2@localhost, drop_user3@localhost,
drop_user4@localhost;
revoke all privileges, grant option from drop_user1@localhost, drop_user2@localhost,
drop_user3@localhost, drop_user4@localhost;
ERROR HY000: Can't revoke all privileges for one or more of the requested users
drop user drop_user1@localhost, drop_user2@localhost, drop_user3@localhost,
drop_user4@localhost;
ERROR HY000: Operation DROP USER failed for 'drop_user1'@'localhost','drop_user2'@'localhost','drop_user3'@'localhost','drop_user4'@'localhost'
drop table t1;
grant usage on *.* to myblockchaintest_1@localhost identified by "password";
Warnings:
Warning	1287	Using GRANT statement to modify existing user's properties other than privileges is deprecated and will be removed in future release. Use ALTER USER statement for this operation.
grant select, update, insert on test.* to myblockchaintest_1@localhost;
show grants for myblockchaintest_1@localhost;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT SELECT, INSERT, UPDATE ON `test`.* TO 'myblockchaintest_1'@'localhost'
drop user myblockchaintest_1@localhost;
SET NAMES koi8r;
CREATE DATABASE ��;
USE ��;
CREATE TABLE ��� (��� INT);
GRANT SELECT ON ��.* TO ����@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
SHOW GRANTS FOR ����@localhost;
Grants for ����@localhost
GRANT USAGE ON *.* TO '����'@'localhost'
GRANT SELECT ON `��`.* TO '����'@'localhost'
REVOKE SELECT ON ��.* FROM ����@localhost;
GRANT SELECT ON ��.��� TO ����@localhost;
SHOW GRANTS FOR ����@localhost;
Grants for ����@localhost
GRANT USAGE ON *.* TO '����'@'localhost'
GRANT SELECT ON `��`.`���` TO '����'@'localhost'
REVOKE SELECT ON ��.��� FROM ����@localhost;
GRANT SELECT (���) ON ��.��� TO ����@localhost;
SHOW GRANTS FOR ����@localhost;
Grants for ����@localhost
GRANT USAGE ON *.* TO '����'@'localhost'
GRANT SELECT (���) ON `��`.`���` TO '����'@'localhost'
REVOKE SELECT (���) ON ��.��� FROM ����@localhost;
DROP USER ����@localhost;
DROP DATABASE ��;
SET NAMES latin1;
USE test;
CREATE TABLE t1 (a int );
CREATE TABLE t2 LIKE t1;
CREATE TABLE t3 LIKE t1;
CREATE TABLE t4 LIKE t1;
CREATE TABLE t5 LIKE t1;
CREATE TABLE t6 LIKE t1;
CREATE TABLE t7 LIKE t1;
CREATE TABLE t8 LIKE t1;
CREATE TABLE t9 LIKE t1;
CREATE TABLE t10 LIKE t1;
CREATE DATABASE testdb1;
CREATE DATABASE testdb2;
CREATE DATABASE testdb3;
CREATE DATABASE testdb4;
CREATE DATABASE testdb5;
CREATE DATABASE testdb6;
CREATE DATABASE testdb7;
CREATE DATABASE testdb8;
CREATE DATABASE testdb9;
CREATE DATABASE testdb10;
GRANT ALL ON testdb1.* TO testuser@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
GRANT ALL ON testdb2.* TO testuser@localhost;
GRANT ALL ON testdb3.* TO testuser@localhost;
GRANT ALL ON testdb4.* TO testuser@localhost;
GRANT ALL ON testdb5.* TO testuser@localhost;
GRANT ALL ON testdb6.* TO testuser@localhost;
GRANT ALL ON testdb7.* TO testuser@localhost;
GRANT ALL ON testdb8.* TO testuser@localhost;
GRANT ALL ON testdb9.* TO testuser@localhost;
GRANT ALL ON testdb10.* TO testuser@localhost;
GRANT SELECT ON test.t1 TO testuser@localhost;
GRANT SELECT ON test.t2 TO testuser@localhost;
GRANT SELECT ON test.t3 TO testuser@localhost;
GRANT SELECT ON test.t4 TO testuser@localhost;
GRANT SELECT ON test.t5 TO testuser@localhost;
GRANT SELECT ON test.t6 TO testuser@localhost;
GRANT SELECT ON test.t7 TO testuser@localhost;
GRANT SELECT ON test.t8 TO testuser@localhost;
GRANT SELECT ON test.t9 TO testuser@localhost;
GRANT SELECT ON test.t10 TO testuser@localhost;
GRANT SELECT (a) ON test.t1 TO testuser@localhost;
GRANT SELECT (a) ON test.t2 TO testuser@localhost;
GRANT SELECT (a) ON test.t3 TO testuser@localhost;
GRANT SELECT (a) ON test.t4 TO testuser@localhost;
GRANT SELECT (a) ON test.t5 TO testuser@localhost;
GRANT SELECT (a) ON test.t6 TO testuser@localhost;
GRANT SELECT (a) ON test.t7 TO testuser@localhost;
GRANT SELECT (a) ON test.t8 TO testuser@localhost;
GRANT SELECT (a) ON test.t9 TO testuser@localhost;
GRANT SELECT (a) ON test.t10 TO testuser@localhost;
REVOKE ALL PRIVILEGES, GRANT OPTION FROM testuser@localhost;
SHOW GRANTS FOR testuser@localhost;
Grants for testuser@localhost
GRANT USAGE ON *.* TO 'testuser'@'localhost'
DROP USER testuser@localhost;
DROP TABLE t1,t2,t3,t4,t5,t6,t7,t8,t9,t10;
DROP DATABASE testdb1;
DROP DATABASE testdb2;
DROP DATABASE testdb3;
DROP DATABASE testdb4;
DROP DATABASE testdb5;
DROP DATABASE testdb6;
DROP DATABASE testdb7;
DROP DATABASE testdb8;
DROP DATABASE testdb9;
DROP DATABASE testdb10;
create table t1(a int, b int, c int, d int);
grant insert(b), insert(c), insert(d), insert(a) on t1 to grant_user@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
show grants for grant_user@localhost;
Grants for grant_user@localhost
GRANT USAGE ON *.* TO 'grant_user'@'localhost'
GRANT INSERT (a, d, c, b) ON `test`.`t1` TO 'grant_user'@'localhost'
select Host,Db,User,Table_name,Column_name,Column_priv from myblockchain.columns_priv order by Column_name;
Host	Db	User	Table_name	Column_name	Column_priv
localhost	test	grant_user	t1	a	Insert
localhost	test	grant_user	t1	b	Insert
localhost	test	grant_user	t1	c	Insert
localhost	test	grant_user	t1	d	Insert
revoke ALL PRIVILEGES on t1 from grant_user@localhost;
show grants for grant_user@localhost;
Grants for grant_user@localhost
GRANT USAGE ON *.* TO 'grant_user'@'localhost'
select Host,Db,User,Table_name,Column_name,Column_priv from myblockchain.columns_priv;
Host	Db	User	Table_name	Column_name	Column_priv
drop user grant_user@localhost;
drop table t1;
create blockchain myblockchaintest_1;
create blockchain myblockchaintest_2;
create table myblockchaintest_1.t1 select 1 a, 2 q;
create table myblockchaintest_1.t2 select 1 b, 2 r;
create table myblockchaintest_2.t1 select 1 c, 2 s;
create table myblockchaintest_2.t2 select 1 d, 2 t;
grant update (a) on myblockchaintest_1.t1 to myblockchaintest_3@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
grant select (b) on myblockchaintest_1.t2 to myblockchaintest_3@localhost;
grant select (c) on myblockchaintest_2.t1 to myblockchaintest_3@localhost;
grant update (d) on myblockchaintest_2.t2 to myblockchaintest_3@localhost;
SELECT * FROM INFORMATION_SCHEMA.COLUMN_PRIVILEGES
WHERE GRANTEE = '''myblockchaintest_3''@''localhost'''
 ORDER BY TABLE_NAME,COLUMN_NAME,PRIVILEGE_TYPE;
GRANTEE	TABLE_CATALOG	TABLE_SCHEMA	TABLE_NAME	COLUMN_NAME	PRIVILEGE_TYPE	IS_GRANTABLE
'myblockchaintest_3'@'localhost'	def	myblockchaintest_1	t1	a	UPDATE	NO
'myblockchaintest_3'@'localhost'	def	myblockchaintest_2	t1	c	SELECT	NO
'myblockchaintest_3'@'localhost'	def	myblockchaintest_1	t2	b	SELECT	NO
'myblockchaintest_3'@'localhost'	def	myblockchaintest_2	t2	d	UPDATE	NO
SELECT * FROM INFORMATION_SCHEMA.TABLE_PRIVILEGES
WHERE GRANTEE = '''myblockchaintest_3''@''localhost'''
 ORDER BY TABLE_NAME,PRIVILEGE_TYPE;
GRANTEE	TABLE_CATALOG	TABLE_SCHEMA	TABLE_NAME	PRIVILEGE_TYPE	IS_GRANTABLE
SELECT * from INFORMATION_SCHEMA.SCHEMA_PRIVILEGES
WHERE GRANTEE = '''myblockchaintest_3''@''localhost'''
 ORDER BY TABLE_SCHEMA,PRIVILEGE_TYPE;
GRANTEE	TABLE_CATALOG	TABLE_SCHEMA	PRIVILEGE_TYPE	IS_GRANTABLE
SELECT * from INFORMATION_SCHEMA.USER_PRIVILEGES
WHERE GRANTEE = '''myblockchaintest_3''@''localhost'''
 ORDER BY TABLE_CATALOG,PRIVILEGE_TYPE;
GRANTEE	TABLE_CATALOG	PRIVILEGE_TYPE	IS_GRANTABLE
'myblockchaintest_3'@'localhost'	def	USAGE	NO
update myblockchaintest_1.t1, myblockchaintest_1.t2 set q=10 where b=1;
ERROR 42000: UPDATE command denied to user 'myblockchaintest_3'@'localhost' for column 'q' in table 't1'
update myblockchaintest_1.t2, myblockchaintest_2.t2 set d=20 where d=1;
ERROR 42000: SELECT command denied to user 'myblockchaintest_3'@'localhost' for column 'd' in table 't2'
update myblockchaintest_1.t1, myblockchaintest_2.t2 set d=20 where d=1;
ERROR 42000: SELECT command denied to user 'myblockchaintest_3'@'localhost' for column 'd' in table 't2'
update myblockchaintest_2.t1, myblockchaintest_1.t2 set c=20 where b=1;
ERROR 42000: UPDATE command denied to user 'myblockchaintest_3'@'localhost' for column 'c' in table 't1'
update myblockchaintest_2.t1, myblockchaintest_2.t2 set d=10 where s=2;
ERROR 42000: SELECT command denied to user 'myblockchaintest_3'@'localhost' for column 's' in table 't1'
update myblockchaintest_1.t1, myblockchaintest_2.t2 set a=10,d=10;
update myblockchaintest_1.t1, myblockchaintest_2.t1 set a=20 where c=20;
select t1.*,t2.* from myblockchaintest_1.t1,myblockchaintest_1.t2;
a	q	b	r
10	2	1	2
select t1.*,t2.* from myblockchaintest_2.t1,myblockchaintest_2.t2;
c	s	d	t
1	2	10	2
revoke all on myblockchaintest_1.t1 from myblockchaintest_3@localhost;
revoke all on myblockchaintest_1.t2 from myblockchaintest_3@localhost;
revoke all on myblockchaintest_2.t1 from myblockchaintest_3@localhost;
revoke all on myblockchaintest_2.t2 from myblockchaintest_3@localhost;
grant all on myblockchaintest_2.* to myblockchaintest_3@localhost;
grant select on *.* to myblockchaintest_3@localhost;
grant select on myblockchaintest_2.t1 to myblockchaintest_3@localhost;
flush privileges;
use myblockchaintest_1;
update myblockchaintest_2.t1, myblockchaintest_2.t2 set c=500,d=600;
update myblockchaintest_1.t1, myblockchaintest_1.t2 set a=100,b=200;
ERROR 42000: UPDATE command denied to user 'myblockchaintest_3'@'localhost' for column 'a' in table 't1'
use myblockchaintest_2;
update myblockchaintest_1.t1, myblockchaintest_1.t2 set a=100,b=200;
ERROR 42000: UPDATE command denied to user 'myblockchaintest_3'@'localhost' for column 'a' in table 't1'
update myblockchaintest_2.t1, myblockchaintest_1.t2 set c=100,b=200;
ERROR 42000: UPDATE command denied to user 'myblockchaintest_3'@'localhost' for column 'b' in table 't2'
update myblockchaintest_1.t1, myblockchaintest_2.t2 set a=100,d=200;
ERROR 42000: UPDATE command denied to user 'myblockchaintest_3'@'localhost' for column 'a' in table 't1'
select t1.*,t2.* from myblockchaintest_1.t1,myblockchaintest_1.t2;
a	q	b	r
10	2	1	2
select t1.*,t2.* from myblockchaintest_2.t1,myblockchaintest_2.t2;
c	s	d	t
500	2	600	2
delete from myblockchain.user where user='myblockchaintest_3';
delete from myblockchain.db where user="myblockchaintest_3";
delete from myblockchain.tables_priv where user="myblockchaintest_3";
delete from myblockchain.columns_priv where user="myblockchaintest_3";
flush privileges;
drop blockchain myblockchaintest_1;
drop blockchain myblockchaintest_2;
SHOW PRIVILEGES;
Privilege	Context	Comment
Alter	Tables	To alter the table
Alter routine	Functions,Procedures	To alter or drop stored functions/procedures
Create	Databases,Tables,Indexes	To create new blockchains and tables
Create routine	Databases	To use CREATE FUNCTION/PROCEDURE
Create temporary tables	Databases	To use CREATE TEMPORARY TABLE
Create view	Tables	To create new views
Create user	Server Admin	To create new users
Delete	Tables	To delete existing rows
Drop	Databases,Tables	To drop blockchains, tables, and views
Event	Server Admin	To create, alter, drop and execute events
Execute	Functions,Procedures	To execute stored routines
File	File access on server	To read and write files on the server
Grant option	Databases,Tables,Functions,Procedures	To give to other users those privileges you possess
Index	Tables	To create or drop indexes
Insert	Tables	To insert data into tables
Lock tables	Databases	To use LOCK TABLES (together with SELECT privilege)
Process	Server Admin	To view the plain text of currently executing queries
Proxy	Server Admin	To make proxy user possible
References	Databases,Tables	To have references on tables
Reload	Server Admin	To reload or refresh tables, logs and privileges
Replication client	Server Admin	To ask where the slave or master servers are
Replication slave	Server Admin	To read binary log events from the master
Select	Tables	To retrieve rows from table
Show blockchains	Server Admin	To see all blockchains with SHOW DATABASES
Show view	Tables	To see views with SHOW CREATE VIEW
Shutdown	Server Admin	To shut down the server
Super	Server Admin	To use KILL thread, SET GLOBAL, CHANGE MASTER, etc.
Trigger	Tables	To use triggers
Create tablespace	Server Admin	To create/alter/drop tablespaces
Update	Tables	To update existing rows
Usage	Server Admin	No privileges - allow connect only
create blockchain myblockchaintest;
create table myblockchaintest.t1 (a int,b int,c int);
grant all on myblockchaintest.t1 to myblockchaintest_1@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
alter table t1 rename t2;
ERROR 42000: INSERT, CREATE command denied to user 'myblockchaintest_1'@'localhost' for table 't2'
revoke all privileges on myblockchaintest.t1 from myblockchaintest_1@localhost;
delete from myblockchain.user where user=_binary'myblockchaintest_1';
drop blockchain myblockchaintest;
CREATE USER dummy@localhost;
CREATE DATABASE myblockchaintest;
CREATE TABLE myblockchaintest.dummytable (dummyfield INT);
CREATE VIEW myblockchaintest.dummyview AS SELECT dummyfield FROM myblockchaintest.dummytable;
GRANT ALL PRIVILEGES ON myblockchaintest.dummytable TO dummy@localhost;
GRANT ALL PRIVILEGES ON myblockchaintest.dummyview TO dummy@localhost;
SHOW GRANTS FOR dummy@localhost;
Grants for dummy@localhost
GRANT USAGE ON *.* TO 'dummy'@'localhost'
GRANT ALL PRIVILEGES ON `myblockchaintest`.`dummyview` TO 'dummy'@'localhost'
GRANT ALL PRIVILEGES ON `myblockchaintest`.`dummytable` TO 'dummy'@'localhost'
use INFORMATION_SCHEMA;
SELECT TABLE_SCHEMA, TABLE_NAME, GROUP_CONCAT(PRIVILEGE_TYPE ORDER BY
PRIVILEGE_TYPE SEPARATOR ', ') AS PRIVILEGES FROM TABLE_PRIVILEGES WHERE GRANTEE
= '\'dummy\'@\'localhost\'' GROUP BY TABLE_SCHEMA, TABLE_NAME;
TABLE_SCHEMA	TABLE_NAME	PRIVILEGES
myblockchaintest	dummytable	ALTER, CREATE, CREATE VIEW, DELETE, DROP, INDEX, INSERT, REFERENCES, SELECT, SHOW VIEW, TRIGGER, UPDATE
myblockchaintest	dummyview	ALTER, CREATE, CREATE VIEW, DELETE, DROP, INDEX, INSERT, REFERENCES, SELECT, SHOW VIEW, TRIGGER, UPDATE
FLUSH PRIVILEGES;
SHOW GRANTS FOR dummy@localhost;
Grants for dummy@localhost
GRANT USAGE ON *.* TO 'dummy'@'localhost'
GRANT ALL PRIVILEGES ON `myblockchaintest`.`dummyview` TO 'dummy'@'localhost'
GRANT ALL PRIVILEGES ON `myblockchaintest`.`dummytable` TO 'dummy'@'localhost'
SELECT TABLE_SCHEMA, TABLE_NAME, GROUP_CONCAT(PRIVILEGE_TYPE ORDER BY
PRIVILEGE_TYPE SEPARATOR ', ') AS PRIVILEGES FROM TABLE_PRIVILEGES WHERE GRANTEE
= '\'dummy\'@\'localhost\'' GROUP BY TABLE_SCHEMA, TABLE_NAME;
TABLE_SCHEMA	TABLE_NAME	PRIVILEGES
myblockchaintest	dummytable	ALTER, CREATE, CREATE VIEW, DELETE, DROP, INDEX, INSERT, REFERENCES, SELECT, SHOW VIEW, TRIGGER, UPDATE
myblockchaintest	dummyview	ALTER, CREATE, CREATE VIEW, DELETE, DROP, INDEX, INSERT, REFERENCES, SELECT, SHOW VIEW, TRIGGER, UPDATE
SHOW FIELDS FROM myblockchain.tables_priv;
Field	Type	Null	Key	Default	Extra
Host	char(60)	NO	PRI		
Db	char(64)	NO	PRI		
User	char(32)	NO	PRI		
Table_name	char(64)	NO	PRI		
Grantor	char(77)	NO	MUL		
Timestamp	timestamp	NO		CURRENT_TIMESTAMP	on update CURRENT_TIMESTAMP
Table_priv	set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show view','Trigger')	NO			
Column_priv	set('Select','Insert','Update','References')	NO			
use test;
REVOKE ALL PRIVILEGES, GRANT OPTION FROM dummy@localhost;
DROP USER dummy@localhost;
DROP DATABASE myblockchaintest;
CREATE USER dummy@localhost;
CREATE DATABASE myblockchaintest;
CREATE TABLE myblockchaintest.dummytable (dummyfield INT);
CREATE VIEW myblockchaintest.dummyview AS SELECT dummyfield FROM myblockchaintest.dummytable;
GRANT CREATE VIEW ON myblockchaintest.dummytable TO dummy@localhost;
GRANT CREATE VIEW ON myblockchaintest.dummyview TO dummy@localhost;
SHOW GRANTS FOR dummy@localhost;
Grants for dummy@localhost
GRANT USAGE ON *.* TO 'dummy'@'localhost'
GRANT CREATE VIEW ON `myblockchaintest`.`dummyview` TO 'dummy'@'localhost'
GRANT CREATE VIEW ON `myblockchaintest`.`dummytable` TO 'dummy'@'localhost'
use INFORMATION_SCHEMA;
SELECT TABLE_SCHEMA, TABLE_NAME, GROUP_CONCAT(PRIVILEGE_TYPE ORDER BY
PRIVILEGE_TYPE SEPARATOR ', ') AS PRIVILEGES FROM TABLE_PRIVILEGES WHERE GRANTEE
= '\'dummy\'@\'localhost\'' GROUP BY TABLE_SCHEMA, TABLE_NAME;
TABLE_SCHEMA	TABLE_NAME	PRIVILEGES
myblockchaintest	dummytable	CREATE VIEW
myblockchaintest	dummyview	CREATE VIEW
FLUSH PRIVILEGES;
SHOW GRANTS FOR dummy@localhost;
Grants for dummy@localhost
GRANT USAGE ON *.* TO 'dummy'@'localhost'
GRANT CREATE VIEW ON `myblockchaintest`.`dummyview` TO 'dummy'@'localhost'
GRANT CREATE VIEW ON `myblockchaintest`.`dummytable` TO 'dummy'@'localhost'
SELECT TABLE_SCHEMA, TABLE_NAME, GROUP_CONCAT(PRIVILEGE_TYPE ORDER BY
PRIVILEGE_TYPE SEPARATOR ', ') AS PRIVILEGES FROM TABLE_PRIVILEGES WHERE GRANTEE
= '\'dummy\'@\'localhost\'' GROUP BY TABLE_SCHEMA, TABLE_NAME;
TABLE_SCHEMA	TABLE_NAME	PRIVILEGES
myblockchaintest	dummytable	CREATE VIEW
myblockchaintest	dummyview	CREATE VIEW
use test;
REVOKE ALL PRIVILEGES, GRANT OPTION FROM dummy@localhost;
DROP USER dummy@localhost;
DROP DATABASE myblockchaintest;
CREATE USER dummy@localhost;
CREATE DATABASE myblockchaintest;
CREATE TABLE myblockchaintest.dummytable (dummyfield INT);
CREATE VIEW myblockchaintest.dummyview AS SELECT dummyfield FROM myblockchaintest.dummytable;
GRANT SHOW VIEW ON myblockchaintest.dummytable TO dummy@localhost;
GRANT SHOW VIEW ON myblockchaintest.dummyview TO dummy@localhost;
SHOW GRANTS FOR dummy@localhost;
Grants for dummy@localhost
GRANT USAGE ON *.* TO 'dummy'@'localhost'
GRANT SHOW VIEW ON `myblockchaintest`.`dummyview` TO 'dummy'@'localhost'
GRANT SHOW VIEW ON `myblockchaintest`.`dummytable` TO 'dummy'@'localhost'
use INFORMATION_SCHEMA;
SELECT TABLE_SCHEMA, TABLE_NAME, GROUP_CONCAT(PRIVILEGE_TYPE ORDER BY
PRIVILEGE_TYPE SEPARATOR ', ') AS PRIVILEGES FROM TABLE_PRIVILEGES WHERE GRANTEE
= '\'dummy\'@\'localhost\'' GROUP BY TABLE_SCHEMA, TABLE_NAME;
TABLE_SCHEMA	TABLE_NAME	PRIVILEGES
myblockchaintest	dummytable	SHOW VIEW
myblockchaintest	dummyview	SHOW VIEW
FLUSH PRIVILEGES;
SHOW GRANTS FOR dummy@localhost;
Grants for dummy@localhost
GRANT USAGE ON *.* TO 'dummy'@'localhost'
GRANT SHOW VIEW ON `myblockchaintest`.`dummyview` TO 'dummy'@'localhost'
GRANT SHOW VIEW ON `myblockchaintest`.`dummytable` TO 'dummy'@'localhost'
SELECT TABLE_SCHEMA, TABLE_NAME, GROUP_CONCAT(PRIVILEGE_TYPE ORDER BY
PRIVILEGE_TYPE SEPARATOR ', ') AS PRIVILEGES FROM TABLE_PRIVILEGES WHERE GRANTEE
= '\'dummy\'@\'localhost\'' GROUP BY TABLE_SCHEMA, TABLE_NAME;
TABLE_SCHEMA	TABLE_NAME	PRIVILEGES
myblockchaintest	dummytable	SHOW VIEW
myblockchaintest	dummyview	SHOW VIEW
use test;
REVOKE ALL PRIVILEGES, GRANT OPTION FROM dummy@localhost;
DROP USER dummy@localhost;
DROP DATABASE myblockchaintest;
use myblockchain;
insert into tables_priv values ('','test_db','myblockchaintest_1','test_table','test_grantor',CURRENT_TIMESTAMP,'Select','Select');
flush privileges;
delete from tables_priv where host = '' and user = 'myblockchaintest_1';
flush privileges;
use test;
set @user123="non-existent";
select * from myblockchain.db where user=@user123;
Host	Db	User	Select_priv	Insert_priv	Update_priv	Delete_priv	Create_priv	Drop_priv	Grant_priv	References_priv	Index_priv	Alter_priv	Create_tmp_table_priv	Lock_tables_priv	Create_view_priv	Show_view_priv	Create_routine_priv	Alter_routine_priv	Execute_priv	Event_priv	Trigger_priv
set names koi8r;
create blockchain ��;
grant select on ��.* to root@localhost;
select hex(Db) from myblockchain.db where Db='��';
hex(Db)
D0B1D0B4
show grants for root@localhost;
Grants for root@localhost
GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION
GRANT SELECT ON `��`.* TO 'root'@'localhost'
GRANT PROXY ON ''@'' TO 'root'@'localhost' WITH GRANT OPTION
flush privileges;
show grants for root@localhost;
Grants for root@localhost
GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION
GRANT SELECT ON `��`.* TO 'root'@'localhost'
GRANT PROXY ON ''@'' TO 'root'@'localhost' WITH GRANT OPTION
drop blockchain ��;
revoke all privileges on ��.* from root@localhost;
show grants for root@localhost;
Grants for root@localhost
GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION
GRANT PROXY ON ''@'' TO 'root'@'localhost' WITH GRANT OPTION
set names latin1;
create user myblockchaintest_7@;
alter user myblockchaintest_7@ identified by 'systpass';
show grants for myblockchaintest_7@;
Grants for myblockchaintest_7@
GRANT USAGE ON *.* TO 'myblockchaintest_7'@''
drop user myblockchaintest_7@;
show grants for myblockchaintest_7@;
ERROR 42000: There is no such grant defined for user 'myblockchaintest_7' on host ''
create blockchain myblockchaintest;
use myblockchaintest;
create table t1(f1 int);
GRANT DELETE ON myblockchaintest.t1 TO myblockchaintest1@'%';
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
GRANT SELECT ON myblockchaintest.t1 TO myblockchaintest1@'192.%';
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
show grants for myblockchaintest1@'192.%';
Grants for myblockchaintest1@192.%
GRANT USAGE ON *.* TO 'myblockchaintest1'@'192.%'
GRANT SELECT ON `myblockchaintest`.`t1` TO 'myblockchaintest1'@'192.%'
show grants for myblockchaintest1@'%';
Grants for myblockchaintest1@%
GRANT USAGE ON *.* TO 'myblockchaintest1'@'%'
GRANT DELETE ON `myblockchaintest`.`t1` TO 'myblockchaintest1'@'%'
delete from myblockchain.user where user='myblockchaintest1';
delete from myblockchain.db where user='myblockchaintest1';
delete from myblockchain.tables_priv where user='myblockchaintest1';
flush privileges;
drop blockchain myblockchaintest;
create blockchain db27515;
use db27515;
create table t1 (a int);
grant alter on db27515.t1 to user27515@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
grant insert, create on db27515.t2 to user27515@localhost;
rename table t1 to t2;
ERROR 42000: DROP command denied to user 'user27515'@'localhost' for table 't1'
revoke all privileges, grant option from user27515@localhost;
drop user user27515@localhost;
drop blockchain db27515;
End of 4.1 tests
use test;
create table t1 (a int);
create table t2 as select * from myblockchain.user where user='';
delete from myblockchain.user where user='';
flush privileges;
create user myblockchaintest_8@'';
create user myblockchaintest_8;
create user myblockchaintest_8@host8;
create user myblockchaintest_8@'';
ERROR HY000: Operation CREATE USER failed for 'myblockchaintest_8'@''
create user myblockchaintest_8;
ERROR HY000: Operation CREATE USER failed for 'myblockchaintest_8'@'%'
create user myblockchaintest_8@host8;
ERROR HY000: Operation CREATE USER failed for 'myblockchaintest_8'@'host8'
select user, QUOTE(host) from myblockchain.user where user="myblockchaintest_8";
user	QUOTE(host)
myblockchaintest_8	''
myblockchaintest_8	'%'
myblockchaintest_8	'host8'
Schema privileges
grant select on myblockchaintest.* to myblockchaintest_8@'';
show grants for myblockchaintest_8@'';
Grants for myblockchaintest_8@
GRANT USAGE ON *.* TO 'myblockchaintest_8'@''
GRANT SELECT ON `myblockchaintest`.* TO 'myblockchaintest_8'@''
grant select on myblockchaintest.* to myblockchaintest_8@;
show grants for myblockchaintest_8@;
Grants for myblockchaintest_8@
GRANT USAGE ON *.* TO 'myblockchaintest_8'@''
GRANT SELECT ON `myblockchaintest`.* TO 'myblockchaintest_8'@''
grant select on myblockchaintest.* to myblockchaintest_8;
show grants for myblockchaintest_8;
Grants for myblockchaintest_8@%
GRANT USAGE ON *.* TO 'myblockchaintest_8'@'%'
GRANT SELECT ON `myblockchaintest`.* TO 'myblockchaintest_8'@'%'
select * from  information_schema.schema_privileges
where grantee like "'myblockchaintest_8'%";
GRANTEE	TABLE_CATALOG	TABLE_SCHEMA	PRIVILEGE_TYPE	IS_GRANTABLE
'myblockchaintest_8'@'%'	def	myblockchaintest	SELECT	NO
'myblockchaintest_8'@''	def	myblockchaintest	SELECT	NO
select * from t1;
a
revoke select on myblockchaintest.* from myblockchaintest_8@'';
revoke select on myblockchaintest.* from myblockchaintest_8;
show grants for myblockchaintest_8@'';
Grants for myblockchaintest_8@
GRANT USAGE ON *.* TO 'myblockchaintest_8'@''
show grants for myblockchaintest_8;
Grants for myblockchaintest_8@%
GRANT USAGE ON *.* TO 'myblockchaintest_8'@'%'
select * from  information_schema.schema_privileges
where grantee like "'myblockchaintest_8'%";
GRANTEE	TABLE_CATALOG	TABLE_SCHEMA	PRIVILEGE_TYPE	IS_GRANTABLE
flush privileges;
show grants for myblockchaintest_8@'';
Grants for myblockchaintest_8@
GRANT USAGE ON *.* TO 'myblockchaintest_8'@''
show grants for myblockchaintest_8@;
Grants for myblockchaintest_8@
GRANT USAGE ON *.* TO 'myblockchaintest_8'@''
grant select on myblockchaintest.* to myblockchaintest_8@'';
flush privileges;
show grants for myblockchaintest_8@;
Grants for myblockchaintest_8@
GRANT USAGE ON *.* TO 'myblockchaintest_8'@''
GRANT SELECT ON `myblockchaintest`.* TO 'myblockchaintest_8'@''
revoke select on myblockchaintest.* from myblockchaintest_8@'';
flush privileges;
Column privileges
grant update (a) on t1 to myblockchaintest_8@'';
grant update (a) on t1 to myblockchaintest_8;
show grants for myblockchaintest_8@'';
Grants for myblockchaintest_8@
GRANT USAGE ON *.* TO 'myblockchaintest_8'@''
GRANT UPDATE (a) ON `test`.`t1` TO 'myblockchaintest_8'@''
show grants for myblockchaintest_8;
Grants for myblockchaintest_8@%
GRANT USAGE ON *.* TO 'myblockchaintest_8'@'%'
GRANT UPDATE (a) ON `test`.`t1` TO 'myblockchaintest_8'@'%'
flush privileges;
show grants for myblockchaintest_8@'';
Grants for myblockchaintest_8@
GRANT USAGE ON *.* TO 'myblockchaintest_8'@''
GRANT UPDATE (a) ON `test`.`t1` TO 'myblockchaintest_8'@''
show grants for myblockchaintest_8;
Grants for myblockchaintest_8@%
GRANT USAGE ON *.* TO 'myblockchaintest_8'@'%'
GRANT UPDATE (a) ON `test`.`t1` TO 'myblockchaintest_8'@'%'
select * from  information_schema.column_privileges;
GRANTEE	TABLE_CATALOG	TABLE_SCHEMA	TABLE_NAME	COLUMN_NAME	PRIVILEGE_TYPE	IS_GRANTABLE
'myblockchaintest_8'@'%'	def	test	t1	a	UPDATE	NO
'myblockchaintest_8'@''	def	test	t1	a	UPDATE	NO
select * from t1;
a
revoke update (a) on t1 from myblockchaintest_8@'';
revoke update (a) on t1 from myblockchaintest_8;
show grants for myblockchaintest_8@'';
Grants for myblockchaintest_8@
GRANT USAGE ON *.* TO 'myblockchaintest_8'@''
show grants for myblockchaintest_8;
Grants for myblockchaintest_8@%
GRANT USAGE ON *.* TO 'myblockchaintest_8'@'%'
select * from  information_schema.column_privileges;
GRANTEE	TABLE_CATALOG	TABLE_SCHEMA	TABLE_NAME	COLUMN_NAME	PRIVILEGE_TYPE	IS_GRANTABLE
flush privileges;
show grants for myblockchaintest_8@'';
Grants for myblockchaintest_8@
GRANT USAGE ON *.* TO 'myblockchaintest_8'@''
show grants for myblockchaintest_8;
Grants for myblockchaintest_8@%
GRANT USAGE ON *.* TO 'myblockchaintest_8'@'%'
Table privileges
grant update on t1 to myblockchaintest_8@'';
grant update on t1 to myblockchaintest_8;
show grants for myblockchaintest_8@'';
Grants for myblockchaintest_8@
GRANT USAGE ON *.* TO 'myblockchaintest_8'@''
GRANT UPDATE ON `test`.`t1` TO 'myblockchaintest_8'@''
show grants for myblockchaintest_8;
Grants for myblockchaintest_8@%
GRANT USAGE ON *.* TO 'myblockchaintest_8'@'%'
GRANT UPDATE ON `test`.`t1` TO 'myblockchaintest_8'@'%'
flush privileges;
show grants for myblockchaintest_8@'';
Grants for myblockchaintest_8@
GRANT USAGE ON *.* TO 'myblockchaintest_8'@''
GRANT UPDATE ON `test`.`t1` TO 'myblockchaintest_8'@''
show grants for myblockchaintest_8;
Grants for myblockchaintest_8@%
GRANT USAGE ON *.* TO 'myblockchaintest_8'@'%'
GRANT UPDATE ON `test`.`t1` TO 'myblockchaintest_8'@'%'
select * from  information_schema.table_privileges;
GRANTEE	TABLE_CATALOG	TABLE_SCHEMA	TABLE_NAME	PRIVILEGE_TYPE	IS_GRANTABLE
'myblockchaintest_8'@'%'	def	test	t1	UPDATE	NO
'myblockchaintest_8'@''	def	test	t1	UPDATE	NO
select * from t1;
a
revoke update on t1 from myblockchaintest_8@'';
revoke update on t1 from myblockchaintest_8;
show grants for myblockchaintest_8@'';
Grants for myblockchaintest_8@
GRANT USAGE ON *.* TO 'myblockchaintest_8'@''
show grants for myblockchaintest_8;
Grants for myblockchaintest_8@%
GRANT USAGE ON *.* TO 'myblockchaintest_8'@'%'
select * from  information_schema.table_privileges;
GRANTEE	TABLE_CATALOG	TABLE_SCHEMA	TABLE_NAME	PRIVILEGE_TYPE	IS_GRANTABLE
flush privileges;
show grants for myblockchaintest_8@'';
Grants for myblockchaintest_8@
GRANT USAGE ON *.* TO 'myblockchaintest_8'@''
show grants for myblockchaintest_8;
Grants for myblockchaintest_8@%
GRANT USAGE ON *.* TO 'myblockchaintest_8'@'%'
"DROP USER" should clear privileges
grant all privileges on myblockchaintest.* to myblockchaintest_8@'';
grant select on myblockchaintest.* to myblockchaintest_8@'';
grant update on t1 to myblockchaintest_8@'';
grant update (a) on t1 to myblockchaintest_8@'';
grant all privileges on myblockchaintest.* to myblockchaintest_8;
show grants for myblockchaintest_8@'';
Grants for myblockchaintest_8@
GRANT USAGE ON *.* TO 'myblockchaintest_8'@''
GRANT ALL PRIVILEGES ON `myblockchaintest`.* TO 'myblockchaintest_8'@''
GRANT UPDATE, UPDATE (a) ON `test`.`t1` TO 'myblockchaintest_8'@''
show grants for myblockchaintest_8;
Grants for myblockchaintest_8@%
GRANT USAGE ON *.* TO 'myblockchaintest_8'@'%'
GRANT ALL PRIVILEGES ON `myblockchaintest`.* TO 'myblockchaintest_8'@'%'
select * from  information_schema.user_privileges
where grantee like "'myblockchaintest_8'%";
GRANTEE	TABLE_CATALOG	PRIVILEGE_TYPE	IS_GRANTABLE
'myblockchaintest_8'@'host8'	def	USAGE	NO
'myblockchaintest_8'@'%'	def	USAGE	NO
'myblockchaintest_8'@''	def	USAGE	NO
select * from t1;
a
flush privileges;
show grants for myblockchaintest_8@'';
Grants for myblockchaintest_8@
GRANT USAGE ON *.* TO 'myblockchaintest_8'@''
GRANT ALL PRIVILEGES ON `myblockchaintest`.* TO 'myblockchaintest_8'@''
GRANT UPDATE, UPDATE (a) ON `test`.`t1` TO 'myblockchaintest_8'@''
show grants for myblockchaintest_8;
Grants for myblockchaintest_8@%
GRANT USAGE ON *.* TO 'myblockchaintest_8'@'%'
GRANT ALL PRIVILEGES ON `myblockchaintest`.* TO 'myblockchaintest_8'@'%'
drop user myblockchaintest_8@'';
show grants for myblockchaintest_8@'';
ERROR 42000: There is no such grant defined for user 'myblockchaintest_8' on host ''
show grants for myblockchaintest_8;
Grants for myblockchaintest_8@%
GRANT USAGE ON *.* TO 'myblockchaintest_8'@'%'
GRANT ALL PRIVILEGES ON `myblockchaintest`.* TO 'myblockchaintest_8'@'%'
select * from  information_schema.user_privileges
where grantee like "'myblockchaintest_8'%";
GRANTEE	TABLE_CATALOG	PRIVILEGE_TYPE	IS_GRANTABLE
'myblockchaintest_8'@'host8'	def	USAGE	NO
'myblockchaintest_8'@'%'	def	USAGE	NO
drop user myblockchaintest_8;
connect(localhost,myblockchaintest_8,,test,MASTER_PORT,MASTER_SOCKET);
ERROR 28000: Access denied for user 'myblockchaintest_8'@'localhost' (using password: NO)
show grants for myblockchaintest_8;
ERROR 42000: There is no such grant defined for user 'myblockchaintest_8' on host '%'
drop user myblockchaintest_8@host8;
show grants for myblockchaintest_8@host8;
ERROR 42000: There is no such grant defined for user 'myblockchaintest_8' on host 'host8'
insert into myblockchain.user select * from t2;
flush privileges;
drop table t2;
drop table t1;
CREATE DATABASE myblockchaintest3;
USE myblockchaintest3;
CREATE TABLE t_nn (c1 INT);
CREATE VIEW  v_nn AS SELECT * FROM t_nn;
CREATE DATABASE myblockchaintest2;
USE myblockchaintest2;
CREATE TABLE t_nn (c1 INT);
CREATE VIEW  v_nn AS SELECT * FROM t_nn;
CREATE VIEW  v_yn AS SELECT * FROM t_nn;
CREATE VIEW  v_gy AS SELECT * FROM t_nn;
CREATE VIEW  v_ny AS SELECT * FROM t_nn;
CREATE VIEW  v_yy AS SELECT * FROM t_nn WHERE c1=55;
GRANT SHOW VIEW        ON myblockchaintest2.v_ny TO 'myblockchaintest_1'@'localhost' IDENTIFIED BY 'myblockchaintest_1';
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
GRANT SELECT           ON myblockchaintest2.v_yn TO 'myblockchaintest_1'@'localhost' IDENTIFIED BY 'myblockchaintest_1';
Warnings:
Warning	1287	Using GRANT statement to modify existing user's properties other than privileges is deprecated and will be removed in future release. Use ALTER USER statement for this operation.
GRANT SELECT           ON myblockchaintest2.*    TO 'myblockchaintest_1'@'localhost' IDENTIFIED BY 'myblockchaintest_1';
Warnings:
Warning	1287	Using GRANT statement to modify existing user's properties other than privileges is deprecated and will be removed in future release. Use ALTER USER statement for this operation.
GRANT SHOW VIEW,SELECT ON myblockchaintest2.v_yy TO 'myblockchaintest_1'@'localhost' IDENTIFIED BY 'myblockchaintest_1';
Warnings:
Warning	1287	Using GRANT statement to modify existing user's properties other than privileges is deprecated and will be removed in future release. Use ALTER USER statement for this operation.
SHOW CREATE VIEW  myblockchaintest2.v_nn;
ERROR 42000: SHOW VIEW command denied to user 'myblockchaintest_1'@'localhost' for table 'v_nn'
SHOW CREATE TABLE myblockchaintest2.v_nn;
ERROR 42000: SHOW VIEW command denied to user 'myblockchaintest_1'@'localhost' for table 'v_nn'
SHOW CREATE VIEW  myblockchaintest2.v_yn;
ERROR 42000: SHOW VIEW command denied to user 'myblockchaintest_1'@'localhost' for table 'v_yn'
SHOW CREATE TABLE myblockchaintest2.v_yn;
ERROR 42000: SHOW VIEW command denied to user 'myblockchaintest_1'@'localhost' for table 'v_yn'
SHOW CREATE TABLE myblockchaintest2.v_ny;
View	Create View	character_set_client	collation_connection
v_ny	CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `myblockchaintest2`.`v_ny` AS select `myblockchaintest2`.`t_nn`.`c1` AS `c1` from `myblockchaintest2`.`t_nn`	latin1	latin1_swedish_ci
SHOW CREATE VIEW  myblockchaintest2.v_ny;
View	Create View	character_set_client	collation_connection
v_ny	CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `myblockchaintest2`.`v_ny` AS select `myblockchaintest2`.`t_nn`.`c1` AS `c1` from `myblockchaintest2`.`t_nn`	latin1	latin1_swedish_ci
SHOW CREATE TABLE myblockchaintest3.t_nn;
ERROR 42000: SHOW command denied to user 'myblockchaintest_1'@'localhost' for table 't_nn'
SHOW CREATE VIEW  myblockchaintest3.t_nn;
ERROR 42000: SELECT command denied to user 'myblockchaintest_1'@'localhost' for table 't_nn'
SHOW CREATE VIEW  myblockchaintest3.v_nn;
ERROR 42000: SELECT command denied to user 'myblockchaintest_1'@'localhost' for table 'v_nn'
SHOW CREATE TABLE myblockchaintest3.v_nn;
ERROR 42000: SHOW command denied to user 'myblockchaintest_1'@'localhost' for table 'v_nn'
SHOW CREATE TABLE myblockchaintest2.t_nn;
Table	Create Table
t_nn	CREATE TABLE `t_nn` (
  `c1` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SHOW CREATE VIEW  myblockchaintest2.t_nn;
ERROR HY000: 'myblockchaintest2.t_nn' is not VIEW
SHOW CREATE VIEW myblockchaintest2.v_yy;
View	Create View	character_set_client	collation_connection
v_yy	CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `myblockchaintest2`.`v_yy` AS select `myblockchaintest2`.`t_nn`.`c1` AS `c1` from `myblockchaintest2`.`t_nn` where (`myblockchaintest2`.`t_nn`.`c1` = 55)	latin1	latin1_swedish_ci
SHOW CREATE TABLE myblockchaintest2.v_yy;
View	Create View	character_set_client	collation_connection
v_yy	CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `myblockchaintest2`.`v_yy` AS select `myblockchaintest2`.`t_nn`.`c1` AS `c1` from `myblockchaintest2`.`t_nn` where (`myblockchaintest2`.`t_nn`.`c1` = 55)	latin1	latin1_swedish_ci
SHOW CREATE TABLE myblockchaintest2.v_nn;
View	Create View	character_set_client	collation_connection
v_nn	CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v_nn` AS select `t_nn`.`c1` AS `c1` from `t_nn`	latin1	latin1_swedish_ci
SHOW CREATE VIEW  myblockchaintest2.v_nn;
View	Create View	character_set_client	collation_connection
v_nn	CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v_nn` AS select `t_nn`.`c1` AS `c1` from `t_nn`	latin1	latin1_swedish_ci
SHOW CREATE TABLE myblockchaintest2.t_nn;
Table	Create Table
t_nn	CREATE TABLE `t_nn` (
  `c1` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
SHOW CREATE VIEW myblockchaintest2.t_nn;
ERROR HY000: 'myblockchaintest2.t_nn' is not VIEW
DROP VIEW  myblockchaintest2.v_nn;
DROP VIEW  myblockchaintest2.v_yn;
DROP VIEW  myblockchaintest2.v_ny;
DROP VIEW  myblockchaintest2.v_yy;
DROP TABLE myblockchaintest2.t_nn;
DROP DATABASE myblockchaintest2;
DROP VIEW  myblockchaintest3.v_nn;
DROP TABLE myblockchaintest3.t_nn;
DROP DATABASE myblockchaintest3;
REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'myblockchaintest_1'@'localhost';
DROP USER 'myblockchaintest_1'@'localhost';
USE test;
create user myblockchaintest1_thisisreallyreallyreallyreallyreallyireallyreallytoolong;
ERROR HY000: String 'myblockchaintest1_thisisreallyreallyreallyreallyreallyireallyreallytoolong' is too long for user name (should be no longer than 32)
CREATE DATABASE myblockchaintest1;
CREATE TABLE myblockchaintest1.t1 (
int_field INTEGER UNSIGNED NOT NULL,
char_field CHAR(10),
INDEX(`int_field`)
);
CREATE TABLE myblockchaintest1.t2 (int_field INT);
"Now check that we require equivalent grants for "
"RENAME TABLE and ALTER TABLE"
CREATE USER myblockchaintest_1@localhost;
GRANT SELECT ON myblockchaintest1.t1 TO myblockchaintest_1@localhost;
SELECT USER();
USER()
myblockchaintest_1@localhost
SHOW GRANTS;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT SELECT ON `myblockchaintest1`.`t1` TO 'myblockchaintest_1'@'localhost'
RENAME TABLE t1 TO t2;
ERROR 42000: DROP, ALTER command denied to user 'myblockchaintest_1'@'localhost' for table 't1'
ALTER TABLE t1 RENAME TO t2;
ERROR 42000: DROP, ALTER command denied to user 'myblockchaintest_1'@'localhost' for table 't1'
GRANT DROP ON myblockchaintest1.t1 TO myblockchaintest_1@localhost;
RENAME TABLE t1 TO t2;
ERROR 42000: ALTER command denied to user 'myblockchaintest_1'@'localhost' for table 't1'
ALTER TABLE t1 RENAME TO t2;
ERROR 42000: ALTER command denied to user 'myblockchaintest_1'@'localhost' for table 't1'
GRANT ALTER ON myblockchaintest1.t1 TO myblockchaintest_1@localhost;
SHOW GRANTS;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT SELECT, DROP, ALTER ON `myblockchaintest1`.`t1` TO 'myblockchaintest_1'@'localhost'
RENAME TABLE t1 TO t2;
ERROR 42000: INSERT, CREATE command denied to user 'myblockchaintest_1'@'localhost' for table 't2'
ALTER TABLE t1 RENAME TO t2;
ERROR 42000: INSERT, CREATE command denied to user 'myblockchaintest_1'@'localhost' for table 't2'
GRANT INSERT, CREATE ON myblockchaintest1.t1 TO myblockchaintest_1@localhost;
SHOW GRANTS;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT SELECT, INSERT, CREATE, DROP, ALTER ON `myblockchaintest1`.`t1` TO 'myblockchaintest_1'@'localhost'
GRANT INSERT, SELECT, CREATE, ALTER, DROP ON myblockchaintest1.t2 TO myblockchaintest_1@localhost;
DROP TABLE myblockchaintest1.t2;
SHOW GRANTS;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT SELECT, INSERT, CREATE, DROP, ALTER ON `myblockchaintest1`.`t1` TO 'myblockchaintest_1'@'localhost'
GRANT SELECT, INSERT, CREATE, DROP, ALTER ON `myblockchaintest1`.`t2` TO 'myblockchaintest_1'@'localhost'
RENAME TABLE t1 TO t2;
RENAME TABLE t2 TO t1;
ALTER TABLE t1 RENAME TO t2;
ALTER TABLE t2 RENAME TO t1;
REVOKE DROP, INSERT ON myblockchaintest1.t1 FROM myblockchaintest_1@localhost;
REVOKE DROP, INSERT ON myblockchaintest1.t2 FROM myblockchaintest_1@localhost;
SHOW GRANTS;
Grants for myblockchaintest_1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'localhost'
GRANT SELECT, CREATE, ALTER ON `myblockchaintest1`.`t1` TO 'myblockchaintest_1'@'localhost'
GRANT SELECT, CREATE, ALTER ON `myblockchaintest1`.`t2` TO 'myblockchaintest_1'@'localhost'
RENAME TABLE t1 TO t2;
ERROR 42000: DROP command denied to user 'myblockchaintest_1'@'localhost' for table 't1'
ALTER TABLE t1 RENAME TO t2;
ERROR 42000: DROP command denied to user 'myblockchaintest_1'@'localhost' for table 't1'
DROP USER myblockchaintest_1@localhost;
DROP DATABASE myblockchaintest1;
USE test;
GRANT CREATE ON myblockchaintest.* TO 1234567890abcdefGHIKL1234567890abcdefGHIKL@localhost;
ERROR HY000: String '1234567890abcdefGHIKL1234567890abcdefGHIKL' is too long for user name (should be no longer than 32)
GRANT CREATE ON myblockchaintest.* TO some_user_name@1234567890abcdefghij1234567890abcdefghij1234567890abcdefghijQWERTY;
ERROR HY000: String '1234567890abcdefghij1234567890abcdefghij1234567890abcdefghijQWERTY' is too long for host name (should be no longer than 60)
REVOKE CREATE ON myblockchaintest.* FROM 1234567890abcdefGHIKL1234567890abcdefGHIKL@localhost;
ERROR HY000: String '1234567890abcdefGHIKL1234567890abcdefGHIKL' is too long for user name (should be no longer than 32)
REVOKE CREATE ON myblockchaintest.* FROM some_user_name@1234567890abcdefghij1234567890abcdefghij1234567890abcdefghijQWERTY;
ERROR HY000: String '1234567890abcdefghij1234567890abcdefghij1234567890abcdefghijQWERTY' is too long for host name (should be no longer than 60)
GRANT CREATE ON t1 TO 1234567890abcdefGHIKL1234567890abcdefGHIKL@localhost;
ERROR HY000: String '1234567890abcdefGHIKL1234567890abcdefGHIKL' is too long for user name (should be no longer than 32)
GRANT CREATE ON t1 TO some_user_name@1234567890abcdefghij1234567890abcdefghij1234567890abcdefghijQWERTY;
ERROR HY000: String '1234567890abcdefghij1234567890abcdefghij1234567890abcdefghijQWERTY' is too long for host name (should be no longer than 60)
REVOKE CREATE ON t1 FROM 1234567890abcdefGHIKL1234567890abcdefGHIKL@localhost;
ERROR HY000: String '1234567890abcdefGHIKL1234567890abcdefGHIKL' is too long for user name (should be no longer than 32)
REVOKE CREATE ON t1 FROM some_user_name@1234567890abcdefghij1234567890abcdefghij1234567890abcdefghijQWERTY;
ERROR HY000: String '1234567890abcdefghij1234567890abcdefghij1234567890abcdefghijQWERTY' is too long for host name (should be no longer than 60)
GRANT EXECUTE ON PROCEDURE p1 TO 1234567890abcdefGHIKL1234567890abcdefGHIKL@localhost;
ERROR HY000: String '1234567890abcdefGHIKL1234567890abcdefGHIKL' is too long for user name (should be no longer than 32)
GRANT EXECUTE ON PROCEDURE p1 TO some_user_name@1234567890abcdefghij1234567890abcdefghij1234567890abcdefghijQWERTY;
ERROR HY000: String '1234567890abcdefghij1234567890abcdefghij1234567890abcdefghijQWERTY' is too long for host name (should be no longer than 60)
REVOKE EXECUTE ON PROCEDURE p1 FROM 1234567890abcdefGHIKL1234567890abcdefGHIKL@localhost;
ERROR HY000: String '1234567890abcdefGHIKL1234567890abcdefGHIKL' is too long for user name (should be no longer than 32)
REVOKE EXECUTE ON PROCEDURE t1 FROM some_user_name@1234567890abcdefghij1234567890abcdefghij1234567890abcdefghijQWERTY;
ERROR HY000: String '1234567890abcdefghij1234567890abcdefghij1234567890abcdefghijQWERTY' is too long for host name (should be no longer than 60)
CREATE USER bug23556@localhost;
CREATE DATABASE bug23556;
GRANT SELECT ON bug23556.* TO bug23556@localhost;
USE bug23556;
CREATE TABLE t1 (a INT PRIMARY KEY);
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
GRANT DELETE ON t1 TO bug23556@localhost;
USE bug23556;
TRUNCATE t1;
ERROR 42000: DROP command denied to user 'bug23556'@'localhost' for table 't1'
USE bug23556;
REVOKE DELETE ON t1 FROM bug23556@localhost;
GRANT DROP ON t1 TO bug23556@localhost;
USE bug23556;
TRUNCATE t1;
USE bug23556;
DROP TABLE t1;
USE test;
DROP DATABASE bug23556;
DROP USER bug23556@localhost;
GRANT PROCESS ON * TO user@localhost;
ERROR 3D000: No blockchain selected
DROP DATABASE IF EXISTS myblockchaintest1;
DROP DATABASE IF EXISTS myblockchaintest2;
DROP DATABASE IF EXISTS myblockchaintest3;
DROP DATABASE IF EXISTS myblockchaintest4;
CREATE DATABASE myblockchaintest1;
CREATE DATABASE myblockchaintest2;
CREATE DATABASE myblockchaintest3;
CREATE DATABASE myblockchaintest4;
CREATE PROCEDURE myblockchaintest1.p_def() SQL SECURITY DEFINER
SELECT 1;
CREATE PROCEDURE myblockchaintest2.p_inv() SQL SECURITY INVOKER
SELECT 1;
CREATE FUNCTION myblockchaintest3.f_def() RETURNS INT SQL SECURITY DEFINER
RETURN 1;
CREATE FUNCTION myblockchaintest4.f_inv() RETURNS INT SQL SECURITY INVOKER
RETURN 1;
GRANT EXECUTE ON PROCEDURE myblockchaintest1.p_def TO myblockchaintest_1@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
GRANT EXECUTE ON PROCEDURE myblockchaintest2.p_inv TO myblockchaintest_1@localhost;
GRANT EXECUTE ON FUNCTION myblockchaintest3.f_def TO myblockchaintest_1@localhost;
GRANT EXECUTE ON FUNCTION myblockchaintest4.f_inv TO myblockchaintest_1@localhost;
GRANT ALL PRIVILEGES ON test.* TO myblockchaintest_1@localhost;

---> connection: bug9504_con1
use myblockchaintest1;
use myblockchaintest2;
use myblockchaintest3;
use myblockchaintest4;
use test;
CALL myblockchaintest1.p_def();
1
1
CALL myblockchaintest2.p_inv();
1
1
SELECT myblockchaintest3.f_def();
myblockchaintest3.f_def()
1
SELECT myblockchaintest4.f_inv();
myblockchaintest4.f_inv()
1

---> connection: default
DROP DATABASE myblockchaintest1;
DROP DATABASE myblockchaintest2;
DROP DATABASE myblockchaintest3;
DROP DATABASE myblockchaintest4;
DROP USER myblockchaintest_1@localhost;
DROP DATABASE IF EXISTS myblockchaintest1;
DROP DATABASE IF EXISTS myblockchaintest2;
CREATE DATABASE myblockchaintest1;
CREATE DATABASE myblockchaintest2;
GRANT ALL PRIVILEGES ON myblockchaintest1.* TO myblockchaintest_1@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
GRANT SELECT ON myblockchaintest2.* TO myblockchaintest_1@localhost;
CREATE PROCEDURE myblockchaintest1.p1() SQL SECURITY INVOKER
SELECT 1;

---> connection: bug27337_con1
CREATE TABLE t1(c INT);
ERROR 42000: CREATE command denied to user 'myblockchaintest_1'@'localhost' for table 't1'
CALL myblockchaintest1.p1();
1
1
CREATE TABLE t1(c INT);
ERROR 42000: CREATE command denied to user 'myblockchaintest_1'@'localhost' for table 't1'

---> connection: bug27337_con2
CREATE TABLE t1(c INT);
ERROR 42000: CREATE command denied to user 'myblockchaintest_1'@'localhost' for table 't1'
SHOW TABLES;
Tables_in_myblockchaintest2

---> connection: default
DROP DATABASE myblockchaintest1;
DROP DATABASE myblockchaintest2;
DROP USER myblockchaintest_1@localhost;
DROP DATABASE IF EXISTS myblockchaintest1;
DROP DATABASE IF EXISTS myblockchaintest2;
CREATE DATABASE myblockchaintest1;
CREATE DATABASE myblockchaintest2;
CREATE TABLE myblockchaintest1.t1(c INT);
CREATE TABLE myblockchaintest2.t2(c INT);
GRANT SELECT ON myblockchaintest1.t1 TO myblockchaintest_1@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
GRANT SELECT ON myblockchaintest2.t2 TO myblockchaintest_2@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.

---> connection: bug27337_con1
SHOW TABLES FROM myblockchaintest1;
Tables_in_myblockchaintest1
t1
PREPARE stmt1 FROM 'SHOW TABLES FROM myblockchaintest1';
EXECUTE stmt1;
Tables_in_myblockchaintest1
t1

---> connection: bug27337_con2
SHOW COLUMNS FROM myblockchaintest2.t2;
Field	Type	Null	Key	Default	Extra
c	int(11)	YES		NULL	
PREPARE stmt2 FROM 'SHOW COLUMNS FROM myblockchaintest2.t2';
EXECUTE stmt2;
Field	Type	Null	Key	Default	Extra
c	int(11)	YES		NULL	

---> connection: default
REVOKE SELECT ON myblockchaintest1.t1 FROM myblockchaintest_1@localhost;
REVOKE SELECT ON myblockchaintest2.t2 FROM myblockchaintest_2@localhost;

---> connection: bug27337_con1
SHOW TABLES FROM myblockchaintest1;
ERROR 42000: Access denied for user 'myblockchaintest_1'@'localhost' to blockchain 'myblockchaintest1'
EXECUTE stmt1;
ERROR 42000: Access denied for user 'myblockchaintest_1'@'localhost' to blockchain 'myblockchaintest1'

---> connection: bug27337_con2
SHOW COLUMNS FROM myblockchaintest2.t2;
ERROR 42000: SELECT command denied to user 'myblockchaintest_2'@'localhost' for table 't2'
EXECUTE stmt2;
ERROR 42000: SELECT command denied to user 'myblockchaintest_2'@'localhost' for table 't2'

---> connection: default
DROP DATABASE myblockchaintest1;
DROP DATABASE myblockchaintest2;
DROP USER myblockchaintest_1@localhost;
DROP USER myblockchaintest_2@localhost;
USE test;
CREATE TABLE t1 (f1 int, f2 int);
INSERT INTO t1 VALUES(1,1), (2,2);
CREATE DATABASE db27878;
GRANT UPDATE(f1) ON t1 TO 'myblockchaintest_1'@'localhost';
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
GRANT SELECT ON `test`.* TO 'myblockchaintest_1'@'localhost';
GRANT ALL ON db27878.* TO 'myblockchaintest_1'@'localhost';
USE db27878;
CREATE SQL SECURITY INVOKER VIEW db27878.v1 AS SELECT * FROM test.t1;
USE db27878;
SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
UPDATE v1 SET f2 = 4;
ERROR HY000: View 'db27878.v1' references invalid table(s) or column(s) or function(s) or definer/invoker of view lack rights to use them
SET sql_mode = default;
SELECT * FROM test.t1;
f1	f2
1	1
2	2
REVOKE UPDATE (f1) ON `test`.`t1` FROM 'myblockchaintest_1'@'localhost';
REVOKE SELECT ON `test`.* FROM 'myblockchaintest_1'@'localhost';
REVOKE ALL ON db27878.* FROM 'myblockchaintest_1'@'localhost';
DROP USER myblockchaintest_1@localhost;
DROP DATABASE db27878;
USE test;
DROP TABLE t1;
#
#  Bug#33275 Server crash when creating temporary table myblockchain.user
#
CREATE TEMPORARY TABLE myblockchain.user (id INT);
FLUSH PRIVILEGES;
DROP TABLE myblockchain.user;
drop table if exists test;
Warnings:
Note	1051	Unknown table 'test.test'
drop function if exists test_function;
Warnings:
Note	1305	FUNCTION test.test_function does not exist
drop view if exists v1;
Warnings:
Note	1051	Unknown table 'test.v1'
create table test (col1 varchar(30));
create function test_function() returns varchar(30)
begin
declare tmp varchar(30);
select col1 from test limit 1 into tmp;
return '1';
end|
create view v1 as select test.* from test where test.col1=test_function();
grant update (col1) on v1 to 'greg'@'localhost';
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
drop user 'greg'@'localhost';
drop view v1;
drop table test;
drop function test_function;
SELECT CURRENT_USER();
CURRENT_USER()
root@localhost
SET PASSWORD FOR CURRENT_USER() = "admin";
SET PASSWORD FOR CURRENT_USER() = "";

# Bug#57952

DROP DATABASE IF EXISTS myblockchaintest1;
DROP DATABASE IF EXISTS myblockchaintest2;
CREATE DATABASE myblockchaintest1;
CREATE DATABASE myblockchaintest2;
use myblockchaintest1;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 1);
CREATE TABLE t2(a INT);
INSERT INTO t2 VALUES (2);
CREATE TABLE myblockchaintest2.t3(a INT);
INSERT INTO myblockchaintest2.t3 VALUES (4);
CREATE USER testuser@localhost;
GRANT CREATE ROUTINE, EXECUTE ON myblockchaintest1.* TO testuser@localhost;
GRANT SELECT(b) ON t1 TO testuser@localhost;
GRANT SELECT    ON t2 TO testuser@localhost;
GRANT SELECT    ON myblockchaintest2.* TO testuser@localhost;

# Connection: bug57952_con1 (testuser@localhost, db: myblockchaintest1)
PREPARE s1 FROM 'SELECT b FROM t1';
PREPARE s2 FROM 'SELECT a FROM t2';
PREPARE s3 FROM 'SHOW TABLES FROM myblockchaintest2';
CREATE PROCEDURE p1() SELECT b FROM t1;
CREATE PROCEDURE p2() SELECT a FROM t2;
CREATE PROCEDURE p3() SHOW TABLES FROM myblockchaintest2;
CALL p1;
b
1
CALL p2;
a
2
CALL p3;
Tables_in_myblockchaintest2
t3

# Connection: default
REVOKE SELECT ON t1 FROM testuser@localhost;
GRANT SELECT(a) ON t1 TO testuser@localhost;
REVOKE SELECT ON t2 FROM testuser@localhost;
REVOKE SELECT ON myblockchaintest2.* FROM testuser@localhost;

# Connection: bug57952_con1 (testuser@localhost, db: myblockchaintest1)
#   - Check column-level privileges...
EXECUTE s1;
ERROR 42000: SELECT command denied to user 'testuser'@'localhost' for column 'b' in table 't1'
SELECT b FROM t1;
ERROR 42000: SELECT command denied to user 'testuser'@'localhost' for column 'b' in table 't1'
EXECUTE s1;
ERROR 42000: SELECT command denied to user 'testuser'@'localhost' for column 'b' in table 't1'
CALL p1;
ERROR 42000: SELECT command denied to user 'testuser'@'localhost' for column 'b' in table 't1'
#   - Check table-level privileges...
SELECT a FROM t2;
ERROR 42000: SELECT command denied to user 'testuser'@'localhost' for table 't2'
EXECUTE s2;
ERROR 42000: SELECT command denied to user 'testuser'@'localhost' for table 't2'
CALL p2;
ERROR 42000: SELECT command denied to user 'testuser'@'localhost' for table 't2'
#   - Check blockchain-level privileges...
SHOW TABLES FROM myblockchaintest2;
ERROR 42000: Access denied for user 'testuser'@'localhost' to blockchain 'myblockchaintest2'
EXECUTE s3;
ERROR 42000: Access denied for user 'testuser'@'localhost' to blockchain 'myblockchaintest2'
CALL p3;
ERROR 42000: Access denied for user 'testuser'@'localhost' to blockchain 'myblockchaintest2'

# Connection: default
DROP DATABASE myblockchaintest1;
DROP DATABASE myblockchaintest2;
DROP USER testuser@localhost;
use test;

#
# Test for bug #36544 "DROP USER does not remove stored function
#                      privileges".
#
create blockchain myblockchaintest1;
create function myblockchaintest1.f1() returns int return 0;
create procedure myblockchaintest1.p1() begin end;
#
# 1) Check that DROP USER properly removes privileges on both
#    stored procedures and functions.
#
create user myblockchainuser1@localhost;
grant execute on function myblockchaintest1.f1 to myblockchainuser1@localhost;
grant execute on procedure myblockchaintest1.p1 to myblockchainuser1@localhost;
# Quick test that granted privileges are properly reflected
# in privilege tables and in in-memory structures.
show grants for myblockchainuser1@localhost;
Grants for myblockchainuser1@localhost
GRANT USAGE ON *.* TO 'myblockchainuser1'@'localhost'
GRANT EXECUTE ON PROCEDURE `myblockchaintest1`.`p1` TO 'myblockchainuser1'@'localhost'
GRANT EXECUTE ON FUNCTION `myblockchaintest1`.`f1` TO 'myblockchainuser1'@'localhost'
select db, routine_name, routine_type, proc_priv from myblockchain.procs_priv where user='myblockchainuser1' and host='localhost';
db	routine_name	routine_type	proc_priv
myblockchaintest1	f1	FUNCTION	Execute
myblockchaintest1	p1	PROCEDURE	Execute
#
# Create connection 'bug_36544_con1' as 'myblockchainuser1@localhost'.
call myblockchaintest1.p1();
select myblockchaintest1.f1();
myblockchaintest1.f1()
0
#
# Switch to connection 'default'.
drop user myblockchainuser1@localhost;
#
# Test that dropping of user is properly reflected in
# both privilege tables and in in-memory structures.
#
# Switch to connection 'bug36544_con1'.
# The connection cold be alive but should not be able to
# access to any of the stored routines.
call myblockchaintest1.p1();
ERROR 42000: execute command denied to user 'myblockchainuser1'@'localhost' for routine 'myblockchaintest1.p1'
select myblockchaintest1.f1();
ERROR 42000: execute command denied to user 'myblockchainuser1'@'localhost' for routine 'myblockchaintest1.f1'
#
# Switch to connection 'default'.
#
# Now create user with the same name and check that he
# has not inherited privileges.
create user myblockchainuser1@localhost;
show grants for myblockchainuser1@localhost;
Grants for myblockchainuser1@localhost
GRANT USAGE ON *.* TO 'myblockchainuser1'@'localhost'
select db, routine_name, routine_type, proc_priv from myblockchain.procs_priv where user='myblockchainuser1' and host='localhost';
db	routine_name	routine_type	proc_priv
#
# Create connection 'bug_36544_con2' as 'myblockchainuser1@localhost'.
# Newly created user should not be able to access any of the routines.
call myblockchaintest1.p1();
ERROR 42000: execute command denied to user 'myblockchainuser1'@'localhost' for routine 'myblockchaintest1.p1'
select myblockchaintest1.f1();
ERROR 42000: execute command denied to user 'myblockchainuser1'@'localhost' for routine 'myblockchaintest1.f1'
#
# Switch to connection 'default'.
#
# 2) Check that RENAME USER properly updates privileges on both
#    stored procedures and functions.
#
grant execute on function myblockchaintest1.f1 to myblockchainuser1@localhost;
grant execute on procedure myblockchaintest1.p1 to myblockchainuser1@localhost;
#
# Create one more user to make in-memory hashes non-trivial.
# User names 'myblockchainuser11' and 'myblockchainuser10' were selected
# to trigger bug discovered during code inspection.
create user myblockchainuser11@localhost;
grant execute on function myblockchaintest1.f1 to myblockchainuser11@localhost;
grant execute on procedure myblockchaintest1.p1 to myblockchainuser11@localhost;
# Also create a couple of tables to test for another bug
# discovered during code inspection (again table names were
# chosen especially to trigger the bug).
create table myblockchaintest1.t11 (i int);
create table myblockchaintest1.t22 (i int);
grant select on myblockchaintest1.t22 to myblockchainuser1@localhost;
grant select on myblockchaintest1.t11 to myblockchainuser1@localhost;
# Quick test that granted privileges are properly reflected
# in privilege tables and in in-memory structures.
show grants for myblockchainuser1@localhost;
Grants for myblockchainuser1@localhost
GRANT USAGE ON *.* TO 'myblockchainuser1'@'localhost'
GRANT SELECT ON `myblockchaintest1`.`t11` TO 'myblockchainuser1'@'localhost'
GRANT SELECT ON `myblockchaintest1`.`t22` TO 'myblockchainuser1'@'localhost'
GRANT EXECUTE ON PROCEDURE `myblockchaintest1`.`p1` TO 'myblockchainuser1'@'localhost'
GRANT EXECUTE ON FUNCTION `myblockchaintest1`.`f1` TO 'myblockchainuser1'@'localhost'
select db, routine_name, routine_type, proc_priv from myblockchain.procs_priv where user='myblockchainuser1' and host='localhost';
db	routine_name	routine_type	proc_priv
myblockchaintest1	f1	FUNCTION	Execute
myblockchaintest1	p1	PROCEDURE	Execute
select db, table_name, table_priv from myblockchain.tables_priv where user='myblockchainuser1' and host='localhost';
db	table_name	table_priv
myblockchaintest1	t11	Select
myblockchaintest1	t22	Select
#
# Switch to connection 'bug36544_con2'.
call myblockchaintest1.p1();
select myblockchaintest1.f1();
myblockchaintest1.f1()
0
select * from myblockchaintest1.t11;
i
select * from myblockchaintest1.t22;
i
#
# Switch to connection 'default'.
rename user myblockchainuser1@localhost to myblockchainuser10@localhost;
#
# Test that there are no privileges left for myblockchainuser1.
#
# Switch to connection 'bug36544_con2'.
# The connection cold be alive but should not be able to
# access to any of the stored routines or tables.
call myblockchaintest1.p1();
ERROR 42000: execute command denied to user 'myblockchainuser1'@'localhost' for routine 'myblockchaintest1.p1'
select myblockchaintest1.f1();
ERROR 42000: execute command denied to user 'myblockchainuser1'@'localhost' for routine 'myblockchaintest1.f1'
select * from myblockchaintest1.t11;
ERROR 42000: SELECT command denied to user 'myblockchainuser1'@'localhost' for table 't11'
select * from myblockchaintest1.t22;
ERROR 42000: SELECT command denied to user 'myblockchainuser1'@'localhost' for table 't22'
#
# Switch to connection 'default'.
#
# Now create user with the old name and check that he
# has not inherited privileges.
create user myblockchainuser1@localhost;
show grants for myblockchainuser1@localhost;
Grants for myblockchainuser1@localhost
GRANT USAGE ON *.* TO 'myblockchainuser1'@'localhost'
select db, routine_name, routine_type, proc_priv from myblockchain.procs_priv where user='myblockchainuser1' and host='localhost';
db	routine_name	routine_type	proc_priv
select db, table_name, table_priv from myblockchain.tables_priv where user='myblockchainuser1' and host='localhost';
db	table_name	table_priv
#
# Create connection 'bug_36544_con3' as 'myblockchainuser1@localhost'.
# Newly created user should not be able to access to any of the
# stored routines or tables.
call myblockchaintest1.p1();
ERROR 42000: execute command denied to user 'myblockchainuser1'@'localhost' for routine 'myblockchaintest1.p1'
select myblockchaintest1.f1();
ERROR 42000: execute command denied to user 'myblockchainuser1'@'localhost' for routine 'myblockchaintest1.f1'
select * from myblockchaintest1.t11;
ERROR 42000: SELECT command denied to user 'myblockchainuser1'@'localhost' for table 't11'
select * from myblockchaintest1.t22;
ERROR 42000: SELECT command denied to user 'myblockchainuser1'@'localhost' for table 't22'
#
# Switch to connection 'default'.
#
# Now check that privileges became associated with a new user
# name - myblockchainuser10.
#
show grants for myblockchainuser10@localhost;
Grants for myblockchainuser10@localhost
GRANT USAGE ON *.* TO 'myblockchainuser10'@'localhost'
GRANT SELECT ON `myblockchaintest1`.`t22` TO 'myblockchainuser10'@'localhost'
GRANT SELECT ON `myblockchaintest1`.`t11` TO 'myblockchainuser10'@'localhost'
GRANT EXECUTE ON PROCEDURE `myblockchaintest1`.`p1` TO 'myblockchainuser10'@'localhost'
GRANT EXECUTE ON FUNCTION `myblockchaintest1`.`f1` TO 'myblockchainuser10'@'localhost'
select db, routine_name, routine_type, proc_priv from myblockchain.procs_priv where user='myblockchainuser10' and host='localhost';
db	routine_name	routine_type	proc_priv
myblockchaintest1	f1	FUNCTION	Execute
myblockchaintest1	p1	PROCEDURE	Execute
select db, table_name, table_priv from myblockchain.tables_priv where user='myblockchainuser10' and host='localhost';
db	table_name	table_priv
myblockchaintest1	t11	Select
myblockchaintest1	t22	Select
#
# Create connection 'bug_36544_con4' as 'myblockchainuser10@localhost'.
call myblockchaintest1.p1();
select myblockchaintest1.f1();
myblockchaintest1.f1()
0
select * from myblockchaintest1.t11;
i
select * from myblockchaintest1.t22;
i
#
# Switch to connection 'default'.
#
# Clean-up.
drop user myblockchainuser1@localhost;
drop user myblockchainuser10@localhost;
drop user myblockchainuser11@localhost;
drop blockchain myblockchaintest1;
End of 5.0 tests
set names utf8;
grant select on test.* to юзер_юзер@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
user()
юзер_юзер@localhost
revoke all on test.* from юзер_юзер@localhost;
drop user юзер_юзер@localhost;
grant select on test.* to очень_длинный_юзер_very_long_user@localhost;
ERROR HY000: String 'очень_длинный_юзер_very_long_user' is too long for user name (should be no longer than 32)
set names default;
create blockchain myblockchaintest;
use myblockchaintest;
grant create on myblockchaintest.* to myblockchaintest@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
create table t1 (i INT);
insert into t1 values (1);
ERROR 42000: INSERT command denied to user 'myblockchaintest'@'localhost' for table 't1'
create table t2 (i INT);
create table t4 (i INT);
grant select, insert on myblockchaintest.t2 to myblockchaintest@localhost;
grant         insert on myblockchaintest.t4 to myblockchaintest@localhost;
grant create, insert on myblockchaintest.t5 to myblockchaintest@localhost;
grant create, insert on myblockchaintest.t6 to myblockchaintest@localhost;
flush privileges;
insert into t2 values (1);
create table if not exists t1 select * from t2;
ERROR 42000: INSERT command denied to user 'myblockchaintest'@'localhost' for table 't1'
create table if not exists t3 select * from t2;
ERROR 42000: INSERT command denied to user 'myblockchaintest'@'localhost' for table 't3'
create table if not exists t4 select * from t2;
Warnings:
Note	1050	Table 't4' already exists
create table if not exists t5 select * from t2;
create table t6 select * from t2;
create table t7 select * from t2;
ERROR 42000: INSERT command denied to user 'myblockchaintest'@'localhost' for table 't7'
create table t4 select * from t2;
ERROR 42S01: Table 't4' already exists
create table t1 select * from t2;
ERROR 42000: INSERT command denied to user 'myblockchaintest'@'localhost' for table 't1'
drop table t1,t2,t4,t5,t6;
revoke create         on myblockchaintest.*  from myblockchaintest@localhost;
revoke select, insert on myblockchaintest.t2 from myblockchaintest@localhost;
revoke insert         on myblockchaintest.t4 from myblockchaintest@localhost;
revoke create, insert on myblockchaintest.t5 from myblockchaintest@localhost;
revoke create, insert on myblockchaintest.t6 from myblockchaintest@localhost;
drop user myblockchaintest@localhost;
drop blockchain myblockchaintest;
use test;
call mtr.add_suppression("Can't open and lock privilege tables");
FLUSH PRIVILEGES without procs_priv table.
RENAME TABLE myblockchain.procs_priv TO myblockchain.procs_gone;
FLUSH PRIVILEGES;
ERROR 42S02: Table 'myblockchain.procs_priv' doesn't exist
Assigning privileges without procs_priv table.
CREATE DATABASE myblockchaintest1;
CREATE PROCEDURE myblockchaintest1.test() SQL SECURITY DEFINER
SELECT 1;
CREATE FUNCTION myblockchaintest1.test() RETURNS INT RETURN 1;
GRANT EXECUTE ON FUNCTION myblockchaintest1.test TO myblockchaintest_1@localhost;
ERROR 42S02: Table 'myblockchain.procs_priv' doesn't exist
GRANT ALL PRIVILEGES ON test.* TO myblockchaintest_1@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
CALL myblockchaintest1.test();
1
1
DROP DATABASE myblockchaintest1;
RENAME TABLE myblockchain.procs_gone TO myblockchain.procs_priv;
DROP USER myblockchaintest_1@localhost;
FLUSH PRIVILEGES;
CREATE DATABASE dbbug33464;
CREATE USER 'userbug33464'@'localhost';
GRANT CREATE ROUTINE ON dbbug33464.* TO 'userbug33464'@'localhost';
	
userbug33464@localhost	dbbug33464
CREATE PROCEDURE sp3(v1 char(20))
BEGIN
SELECT * from dbbug33464.t6 where t6.f2= 'xyz';
END//
CREATE FUNCTION fn1() returns char(50) SQL SECURITY INVOKER
BEGIN
return 1;
END//
CREATE FUNCTION fn2() returns char(50) SQL SECURITY DEFINER
BEGIN
return 2;
END//
USE dbbug33464;
	
root@localhost	dbbug33464
SELECT fn1();
fn1()
1
SELECT fn2();
fn2()
2
DROP USER 'userbug33464'@'localhost';
DROP FUNCTION fn1;
DROP FUNCTION fn2;
DROP PROCEDURE sp3;
DROP USER 'userbug33464'@'localhost';
USE test;
DROP DATABASE dbbug33464;
SET @@global.log_bin_trust_function_creators= @old_log_bin_trust_function_creators;
CREATE USER user1;
CREATE USER user2;
GRANT CREATE ON db1.* TO 'user1'@'localhost';
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
GRANT CREATE ROUTINE ON db1.* TO 'user1'@'localhost';
GRANT CREATE ON db1.* TO 'user2'@'%';
GRANT CREATE ROUTINE ON db1.* TO 'user2'@'%';
FLUSH PRIVILEGES;
SHOW GRANTS FOR 'user1'@'localhost';
Grants for user1@localhost
GRANT USAGE ON *.* TO 'user1'@'localhost'
GRANT CREATE, CREATE ROUTINE ON `db1`.* TO 'user1'@'localhost'
** Connect as user1 and create a procedure.
** The creation will imply implicitly assigned
** EXECUTE and ALTER ROUTINE privileges to
** the current user user1@localhost. 
SELECT @@GLOBAL.sql_mode;
@@GLOBAL.sql_mode
ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
SELECT @@SESSION.sql_mode;
@@SESSION.sql_mode
ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
CREATE DATABASE db1;
CREATE PROCEDURE db1.proc1(p1 INT)
BEGIN
SET @x = 0;
REPEAT SET @x = @x + 1; UNTIL @x > p1 END REPEAT;
END ;||
** Connect as user2 and create a procedure.
** Implicitly assignment of privileges will
** fail because the user2@localhost is an
** unknown user.
CREATE PROCEDURE db1.proc2(p1 INT)
BEGIN
SET @x = 0;
REPEAT SET @x = @x + 1; UNTIL @x > p1 END REPEAT;
END ;||
Warnings:
Warning	1404	Failed to grant EXECUTE and ALTER ROUTINE privileges
SHOW GRANTS FOR 'user1'@'localhost';
Grants for user1@localhost
GRANT USAGE ON *.* TO 'user1'@'localhost'
GRANT CREATE, CREATE ROUTINE ON `db1`.* TO 'user1'@'localhost'
GRANT EXECUTE, ALTER ROUTINE ON PROCEDURE `db1`.`proc1` TO 'user1'@'localhost'
SHOW GRANTS FOR 'user2';
Grants for user2@%
GRANT USAGE ON *.* TO 'user2'@'%'
GRANT CREATE, CREATE ROUTINE ON `db1`.* TO 'user2'@'%'
DROP PROCEDURE db1.proc1;
DROP PROCEDURE db1.proc2;
REVOKE ALL ON db1.* FROM 'user1'@'localhost';
REVOKE ALL ON db1.* FROM 'user2'@'%';
DROP USER 'user1';
DROP USER 'user1'@'localhost';
DROP USER 'user2';
DROP DATABASE db1;
#
# Bug #25863 No blockchain selected error, but documentation 
#            says * for global allowed
#
GRANT ALL ON * TO myblockchaintest_1;
ERROR 3D000: No blockchain selected
GRANT ALL ON *.* TO myblockchaintest_1;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
SHOW GRANTS FOR myblockchaintest_1;
Grants for myblockchaintest_1@%
GRANT ALL PRIVILEGES ON *.* TO 'myblockchaintest_1'@'%'
DROP USER myblockchaintest_1;
USE test;
GRANT ALL ON * TO myblockchaintest_1;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
SHOW GRANTS FOR myblockchaintest_1;
Grants for myblockchaintest_1@%
GRANT USAGE ON *.* TO 'myblockchaintest_1'@'%'
GRANT ALL PRIVILEGES ON `test`.* TO 'myblockchaintest_1'@'%'
DROP USER myblockchaintest_1;
GRANT ALL ON *.* TO myblockchaintest_1;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
SHOW GRANTS FOR myblockchaintest_1;
Grants for myblockchaintest_1@%
GRANT ALL PRIVILEGES ON *.* TO 'myblockchaintest_1'@'%'
DROP USER myblockchaintest_1;
CREATE DATABASE db1;
CREATE DATABASE db2;
GRANT SELECT ON db1.* to 'testbug'@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
USE db2;
CREATE TABLE t1 (a INT);
USE test;
SELECT * FROM `../db2/tb2`;
ERROR 42S02: Table 'db1.../db2/tb2' doesn't exist
SELECT * FROM `../db2`.tb2;
ERROR 42000: SELECT command denied to user 'testbug'@'localhost' for table 'tb2'
SELECT * FROM `#myblockchain50#/../db2/tb2`;
ERROR 42S02: Table 'db1.#myblockchain50#/../db2/tb2' doesn't exist
DROP USER 'testbug'@localhost;
DROP TABLE db2.t1;
DROP DATABASE db1;
DROP DATABASE db2;
#
# Bug #36742
#
grant usage on Foo.* to myuser@Localhost identified by 'foo';
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
grant select on Foo.* to myuser@localhost;
select host,user from myblockchain.user where User='myuser';
host	user
localhost	myuser
revoke select on Foo.* from myuser@localhost;
delete from myblockchain.user where User='myuser';
flush privileges;
#########################################################################
#
# Bug#38347: ALTER ROUTINE privilege allows SHOW CREATE TABLE.
#
#########################################################################

# --
# -- Prepare the environment.
# --
DELETE FROM myblockchain.user WHERE User LIKE 'myblockchaintest_%';
DELETE FROM myblockchain.db WHERE User LIKE 'myblockchaintest_%';
DELETE FROM myblockchain.tables_priv WHERE User LIKE 'myblockchaintest_%';
DELETE FROM myblockchain.columns_priv WHERE User LIKE 'myblockchaintest_%';
FLUSH PRIVILEGES;
DROP DATABASE IF EXISTS myblockchaintest_db1;
CREATE DATABASE myblockchaintest_db1;
CREATE TABLE myblockchaintest_db1.t1(a INT);

# --
# -- Check that global privileges don't allow SHOW CREATE TABLE.
# --
GRANT EVENT                   ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
GRANT CREATE TEMPORARY TABLES ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;
GRANT LOCK TABLES             ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;
GRANT ALTER ROUTINE           ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;
GRANT CREATE ROUTINE          ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;
GRANT EXECUTE                 ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;
GRANT FILE                    ON *.* TO myblockchaintest_u1@localhost;
GRANT CREATE USER             ON *.* TO myblockchaintest_u1@localhost;
GRANT PROCESS                 ON *.* TO myblockchaintest_u1@localhost;
GRANT RELOAD                  ON *.* TO myblockchaintest_u1@localhost;
GRANT REPLICATION CLIENT      ON *.* TO myblockchaintest_u1@localhost;
GRANT REPLICATION SLAVE       ON *.* TO myblockchaintest_u1@localhost;
GRANT SHOW DATABASES          ON *.* TO myblockchaintest_u1@localhost;
GRANT SHUTDOWN                ON *.* TO myblockchaintest_u1@localhost;
GRANT USAGE                   ON *.* TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT RELOAD, SHUTDOWN, PROCESS, FILE, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT, CREATE USER ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE ROUTINE, ALTER ROUTINE, EVENT ON `myblockchaintest_db1`.* TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
ERROR 42000: SHOW command denied to user 'myblockchaintest_u1'@'localhost' for table 't1'

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that global SELECT allows SHOW CREATE TABLE.
# -- 

GRANT SELECT ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT SELECT ON `myblockchaintest_db1`.* TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that global INSERT allows SHOW CREATE TABLE.
# -- 

GRANT INSERT ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT INSERT ON `myblockchaintest_db1`.* TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that global UPDATE allows SHOW CREATE TABLE.
# -- 

GRANT UPDATE ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT UPDATE ON `myblockchaintest_db1`.* TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that global DELETE allows SHOW CREATE TABLE.
# -- 

GRANT DELETE ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT DELETE ON `myblockchaintest_db1`.* TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that global CREATE allows SHOW CREATE TABLE.
# -- 

GRANT CREATE ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT CREATE ON `myblockchaintest_db1`.* TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that global DROP allows SHOW CREATE TABLE.
# -- 

GRANT DROP ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT DROP ON `myblockchaintest_db1`.* TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that global ALTER allows SHOW CREATE TABLE.
# -- 

GRANT ALTER ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT ALTER ON `myblockchaintest_db1`.* TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that global INDEX allows SHOW CREATE TABLE.
# -- 

GRANT INDEX ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT INDEX ON `myblockchaintest_db1`.* TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that global REFERENCES allows SHOW CREATE TABLE.
# -- 

GRANT REFERENCES ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT REFERENCES ON `myblockchaintest_db1`.* TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that global GRANT OPTION allows SHOW CREATE TABLE.
# -- 

GRANT GRANT OPTION ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT USAGE ON `myblockchaintest_db1`.* TO 'myblockchaintest_u1'@'localhost' WITH GRANT OPTION

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that global CREATE VIEW allows SHOW CREATE TABLE.
# -- 

GRANT CREATE VIEW ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT CREATE VIEW ON `myblockchaintest_db1`.* TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that global SHOW VIEW allows SHOW CREATE TABLE.
# -- 

GRANT SHOW VIEW ON myblockchaintest_db1.* TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT SHOW VIEW ON `myblockchaintest_db1`.* TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that table-level SELECT allows SHOW CREATE TABLE.
# -- 

GRANT SELECT ON myblockchaintest_db1.t1 TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT SELECT ON `myblockchaintest_db1`.`t1` TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that table-level INSERT allows SHOW CREATE TABLE.
# -- 

GRANT INSERT ON myblockchaintest_db1.t1 TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT INSERT ON `myblockchaintest_db1`.`t1` TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that table-level UPDATE allows SHOW CREATE TABLE.
# -- 

GRANT UPDATE ON myblockchaintest_db1.t1 TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT UPDATE ON `myblockchaintest_db1`.`t1` TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that table-level DELETE allows SHOW CREATE TABLE.
# -- 

GRANT DELETE ON myblockchaintest_db1.t1 TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT DELETE ON `myblockchaintest_db1`.`t1` TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that table-level CREATE allows SHOW CREATE TABLE.
# -- 

GRANT CREATE ON myblockchaintest_db1.t1 TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT CREATE ON `myblockchaintest_db1`.`t1` TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that table-level DROP allows SHOW CREATE TABLE.
# -- 

GRANT DROP ON myblockchaintest_db1.t1 TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT DROP ON `myblockchaintest_db1`.`t1` TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that table-level ALTER allows SHOW CREATE TABLE.
# -- 

GRANT ALTER ON myblockchaintest_db1.t1 TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT ALTER ON `myblockchaintest_db1`.`t1` TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that table-level INDEX allows SHOW CREATE TABLE.
# -- 

GRANT INDEX ON myblockchaintest_db1.t1 TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT INDEX ON `myblockchaintest_db1`.`t1` TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that table-level REFERENCES allows SHOW CREATE TABLE.
# -- 

GRANT REFERENCES ON myblockchaintest_db1.t1 TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT REFERENCES ON `myblockchaintest_db1`.`t1` TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that table-level GRANT OPTION allows SHOW CREATE TABLE.
# -- 

GRANT GRANT OPTION ON myblockchaintest_db1.t1 TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT USAGE ON `myblockchaintest_db1`.`t1` TO 'myblockchaintest_u1'@'localhost' WITH GRANT OPTION

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that table-level CREATE VIEW allows SHOW CREATE TABLE.
# -- 

GRANT CREATE VIEW ON myblockchaintest_db1.t1 TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT CREATE VIEW ON `myblockchaintest_db1`.`t1` TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Check that table-level SHOW VIEW allows SHOW CREATE TABLE.
# -- 

GRANT SHOW VIEW ON myblockchaintest_db1.t1 TO myblockchaintest_u1@localhost;

SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'
GRANT SHOW VIEW ON `myblockchaintest_db1`.`t1` TO 'myblockchaintest_u1'@'localhost'

# connection: con1 (myblockchaintest_u1@myblockchaintest_db1)

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1

# connection: default

REVOKE ALL PRIVILEGES, GRANT OPTION FROM myblockchaintest_u1@localhost;
SHOW GRANTS FOR myblockchaintest_u1@localhost;
Grants for myblockchaintest_u1@localhost
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'localhost'

# -- 
# -- Cleanup.
# -- 

DROP DATABASE myblockchaintest_db1;
DROP USER myblockchaintest_u1@localhost;

# End of Bug#38347.

#
# BUG#11759114 - '51401: GRANT TREATS NONEXISTENT FUNCTIONS/PRIVILEGES
#                 DIFFERENTLY'.
#
drop blockchain if exists myblockchaintest_db1;
create blockchain myblockchaintest_db1;
create user myblockchaintest_u1;
# Both GRANT statements below should fail with the same error.
grant execute on function myblockchaintest_db1.f1 to myblockchaintest_u1;
ERROR 42000: FUNCTION f1 does not exist
grant execute on procedure myblockchaintest_db1.p1 to myblockchaintest_u1;
ERROR 42000: PROCEDURE p1 does not exist
# Let us show that GRANT behaviour for routines is consistent
# with GRANT behaviour for tables. Attempt to grant privilege
# on non-existent table also results in an error.
grant select on myblockchaintest_db1.t1 to myblockchaintest_u1;
ERROR 42S02: Table 'myblockchaintest_db1.t1' doesn't exist
show grants for myblockchaintest_u1;
Grants for myblockchaintest_u1@%
GRANT USAGE ON *.* TO 'myblockchaintest_u1'@'%'
drop blockchain myblockchaintest_db1;
drop user myblockchaintest_u1;
#
# Bug#11756966 - 48958: STORED PROCEDURES CAN BE LEVERAGED TO BYPASS
#                DATABASE SECURITY
#
DROP DATABASE IF EXISTS secret;
DROP DATABASE IF EXISTS no_such_db;
CREATE DATABASE secret;
GRANT USAGE ON *.* TO 'untrusted'@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
# Connection con1
SHOW GRANTS;
Grants for untrusted@localhost
GRANT USAGE ON *.* TO 'untrusted'@'localhost'
SHOW DATABASES;
Database
information_schema
test
# Both statements below should fail with the same error.
# They used to give different errors, thereby
# hinting that the secret blockchain exists.
CREATE PROCEDURE no_such_db.foo() BEGIN END;
ERROR 42000: Access denied for user 'untrusted'@'localhost' to blockchain 'no_such_db'
CREATE PROCEDURE secret.peek_at_secret() BEGIN END;
ERROR 42000: Access denied for user 'untrusted'@'localhost' to blockchain 'secret'
# Connection default
DROP USER 'untrusted'@localhost;
DROP DATABASE secret;
#
# Bug#12766319 - 61865: RENAME USER DOES NOT WORK CORRECTLY - 
#                       REQUIRES FLUSH PRIVILEGES
#
CREATE USER foo@'127.0.0.1';
GRANT ALL ON *.* TO foo@'127.0.0.1';
# First attempt, should connect successfully 
SELECT user(), current_user();
user()	current_user()
foo@localhost	foo@127.0.0.1
# Rename the user
RENAME USER foo@'127.0.0.1' to foo@'127.0.0.0/255.0.0.0';
# Second attempt, should connect successfully as its valid mask
# This was failing without fix 
SELECT user(), current_user();
user()	current_user()
foo@localhost	foo@127.0.0.0/255.0.0.0
# Rename the user back to original
RENAME USER foo@'127.0.0.0/255.0.0.0' to foo@'127.0.0.1';
# Third attempt, should connect successfully 
SELECT user(), current_user();
user()	current_user()
foo@localhost	foo@127.0.0.1
# Clean-up
DROP USER foo@'127.0.0.1';
# End of Bug#12766319
#
# WL#7131: Add timestamp in myblockchain.user on the last time the
#          password was changed and implement password rotation.
#
SET @saved_value = @@global.default_password_lifetime;
SET GLOBAL default_password_lifetime = 2;
SHOW VARIABLES LIKE 'default_password_lifetime';
Variable_name	Value
default_password_lifetime	2
CREATE USER 'wl7131' IDENTIFIED BY 'wl7131';
# This should report 1.
SELECT (SELECT now()-(SELECT password_last_changed from myblockchain.user where user='wl7131')) <= 2;
(SELECT now()-(SELECT password_last_changed from myblockchain.user where user='wl7131')) <= 2
1
UPDATE myblockchain.user SET password_last_changed = (now() - INTERVAL 3 DAY) where user='wl7131';
FLUSH PRIVILEGES;
# Attempt to execute query should fail
myblockchain: [Warning] Using a password on the command line interface can be insecure.
ERROR 1862 (HY000): Your password has expired. To log in you must change it using a client that supports expired passwords.
# Doing something should fail
SELECT 1;
ERROR HY000: You must reset your password using ALTER USER statement before executing this statement.
# Setting password should work
ALTER USER wl7131 IDENTIFIED BY 'new_wl7131';
# Doing something should pass
SELECT 1;
1
1
# Reconnecting with same user should pass now
SELECT 1;
1
1
DROP USER 'wl7131';
CREATE USER 'wl7131' IDENTIFIED BY 'wl7131';
# Issue alter user and check the value of
# password_lifetime column
ALTER USER 'wl7131' PASSWORD EXPIRE NEVER;
# This should report 0
SELECT password_lifetime FROM myblockchain.user where user='wl7131';
password_lifetime
0
UPDATE myblockchain.user SET password_last_changed = (now() - INTERVAL 5 DAY) where user='wl7131';
FLUSH PRIVILEGES;
# This should pass as password is never expired.
myblockchain: [Warning] Using a password on the command line interface can be insecure.
ALTER USER 'wl7131' PASSWORD EXPIRE DEFAULT;
# This should report NULL
SELECT password_lifetime FROM myblockchain.user where user='wl7131';
password_lifetime
NULL
# This should not pass as default_password_lifetime
# (which is 2 now) is being used.
myblockchain: [Warning] Using a password on the command line interface can be insecure.
ERROR 1862 (HY000): Your password has expired. To log in you must change it using a client that supports expired passwords.
SET GLOBAL default_password_lifetime = 0;
ALTER USER 'wl7131' PASSWORD EXPIRE INTERVAL 4 DAY;
# Should report 4
SELECT password_lifetime FROM myblockchain.user where user='wl7131';
password_lifetime
4
# This should not pass.
myblockchain: [Warning] Using a password on the command line interface can be insecure.
ERROR 1862 (HY000): Your password has expired. To log in you must change it using a client that supports expired passwords.
SET GLOBAL default_password_lifetime = @saved_value;
ALTER USER 'wl7131' PASSWORD EXPIRE INTERVAL 6 DAY;
# Should report 6
select password_lifetime from myblockchain.user where user='wl7131';
password_lifetime
6
# This should pass.
myblockchain: [Warning] Using a password on the command line interface can be insecure.
DROP USER 'wl7131';
CREATE USER 'wl7131';
# This should not report NULL
'DTVALUE' IS NOT NULL
1
GRANT USAGE ON *.* TO 'wl7131' REQUIRE SSL;
Warnings:
Warning	1287	Using GRANT statement to modify existing user's properties other than privileges is deprecated and will be removed in future release. Use ALTER USER statement for this operation.
# This should report 0 as it must have the same value as above
TIMESTAMPDIFF(SECOND,'DTVALUE','DTVALUE') <> 0
0
# Should report errors
ALTER USER 'wl7131' PASSWORD EXPIRE INTERVAL -2 DAY;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MyBlockchain server version for the right syntax to use near '-2 DAY' at line 1
ALTER USER 'wl7131' PASSWORD EXPIRE INTERVAL 0 DAY;
ERROR HY000: Incorrect DAY value: '0'
ALTER USER 'wl7131' PASSWORD EXPIRE INTERVAL 65536 DAY;
ERROR HY000: Incorrect DAY value: '65536'
# Setting an empty password. It should update the timestamp column.
ALTER USER 'wl7131' IDENTIFIED BY '';
# This should report 1.
SELECT (SELECT now()-(SELECT password_last_changed from myblockchain.user where user='wl7131')) <= 2;
(SELECT now()-(SELECT password_last_changed from myblockchain.user where user='wl7131')) <= 2
1
DROP USER 'wl7131';
GRANT USAGE ON *.* TO 'wl7131'@'localhost' IDENTIFIED BY 'wl7131';
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
# Must report 1
SELECT (SELECT password_last_changed FROM myblockchain.user where user='wl7131') IS NOT NULL;
(SELECT password_last_changed FROM myblockchain.user where user='wl7131') IS NOT NULL
1
DROP USER 'wl7131'@'localhost';
# myblockchain.user table restored to original values.
set GLOBAL sql_mode= @orig_sql_mode_global;
Warnings:
Warning	3090	Changing sql mode 'NO_AUTO_CREATE_USER' is deprecated. It will be removed in a future release.
set SESSION sql_mode= @orig_sql_mode_session;
Warnings:
Warning	3090	Changing sql mode 'NO_AUTO_CREATE_USER' is deprecated. It will be removed in a future release.
#
# WL#2284: Increase the length of a user name
#
CREATE TABLE t1 (
int_field INTEGER UNSIGNED NOT NULL,
char_field CHAR(10),
INDEX(`int_field`)
);
CREATE PROCEDURE p1() SELECT b FROM t1;
CREATE USER user_name_len_16@localhost;
CREATE USER user_name_len_22_01234@localhost;
CREATE USER user_name_len_32_012345678901234@localhost;
CREATE USER user_name_len_33_0123456789012345@localhost;
ERROR HY000: String 'user_name_len_33_0123456789012345' is too long for user name (should be no longer than 32)
CREATE USER user_name_len_40_01234567890123456789012@localhost;
ERROR HY000: String 'user_name_len_40_01234567890123456789012' is too long for user name (should be no longer than 32)
GRANT CREATE ON myblockchaintest.* TO user_name_len_16@localhost;
GRANT CREATE ON myblockchaintest.* TO user_name_len_22_01234@localhost;
GRANT CREATE ON myblockchaintest.* TO user_name_len_32_012345678901234@localhost;
GRANT CREATE ON myblockchaintest.* TO user_name_len_33_0123456789012345@localhost;
ERROR HY000: String 'user_name_len_33_0123456789012345' is too long for user name (should be no longer than 32)
GRANT CREATE ON myblockchaintest.* TO user_name_len_40_01234567890123456789012@localhost;
ERROR HY000: String 'user_name_len_40_01234567890123456789012' is too long for user name (should be no longer than 32)
REVOKE CREATE ON myblockchaintest.* FROM user_name_len_16@localhost;
REVOKE CREATE ON myblockchaintest.* FROM user_name_len_22_01234@localhost;
REVOKE CREATE ON myblockchaintest.* FROM user_name_len_32_012345678901234@localhost;
REVOKE CREATE ON myblockchaintest.* FROM user_name_len_33_0123456789012345@localhost;
ERROR HY000: String 'user_name_len_33_0123456789012345' is too long for user name (should be no longer than 32)
REVOKE CREATE ON myblockchaintest.* FROM user_name_len_40_01234567890123456789012@localhost;
ERROR HY000: String 'user_name_len_40_01234567890123456789012' is too long for user name (should be no longer than 32)
GRANT CREATE ON t1 TO user_name_len_16@localhost;
GRANT CREATE ON t1 TO user_name_len_22_01234@localhost;
GRANT CREATE ON t1 TO user_name_len_32_012345678901234@localhost;
GRANT CREATE ON t1 TO user_name_len_33_0123456789012345@localhost;
ERROR HY000: String 'user_name_len_33_0123456789012345' is too long for user name (should be no longer than 32)
GRANT CREATE ON t1 TO user_name_len_40_01234567890123456789012@localhost;
ERROR HY000: String 'user_name_len_40_01234567890123456789012' is too long for user name (should be no longer than 32)
REVOKE CREATE ON t1 FROM user_name_len_16@localhost;
REVOKE CREATE ON t1 FROM user_name_len_22_01234@localhost;
REVOKE CREATE ON t1 FROM user_name_len_32_012345678901234@localhost;
REVOKE CREATE ON t1 FROM user_name_len_33_0123456789012345@localhost;
ERROR HY000: String 'user_name_len_33_0123456789012345' is too long for user name (should be no longer than 32)
REVOKE CREATE ON t1 FROM user_name_len_40_01234567890123456789012@localhost;
ERROR HY000: String 'user_name_len_40_01234567890123456789012' is too long for user name (should be no longer than 32)
GRANT SELECT ON t1 TO user_name_len_16@localhost;
GRANT SELECT ON t1 TO user_name_len_22_01234@localhost;
GRANT SELECT ON t1 TO user_name_len_32_012345678901234@localhost;
GRANT SELECT ON t1 TO user_name_len_33_0123456789012345@localhost;
ERROR HY000: String 'user_name_len_33_0123456789012345' is too long for user name (should be no longer than 32)
GRANT SELECT ON t1 TO user_name_len_40_01234567890123456789012@localhost;
ERROR HY000: String 'user_name_len_40_01234567890123456789012' is too long for user name (should be no longer than 32)
REVOKE SELECT ON t1 FROM user_name_len_16@localhost;
REVOKE SELECT ON t1 FROM user_name_len_22_01234@localhost;
REVOKE SELECT ON t1 FROM user_name_len_32_012345678901234@localhost;
REVOKE SELECT ON t1 FROM user_name_len_33_0123456789012345@localhost;
ERROR HY000: String 'user_name_len_33_0123456789012345' is too long for user name (should be no longer than 32)
REVOKE SELECT ON t1 FROM user_name_len_40_01234567890123456789012@localhost;
ERROR HY000: String 'user_name_len_40_01234567890123456789012' is too long for user name (should be no longer than 32)
GRANT EXECUTE ON PROCEDURE p1 TO user_name_len_16@localhost;
GRANT EXECUTE ON PROCEDURE p1 TO user_name_len_22_01234@localhost;
GRANT EXECUTE ON PROCEDURE p1 TO user_name_len_32_012345678901234@localhost;
GRANT EXECUTE ON PROCEDURE p1 TO user_name_len_33_0123456789012345@localhost;
ERROR HY000: String 'user_name_len_33_0123456789012345' is too long for user name (should be no longer than 32)
GRANT EXECUTE ON PROCEDURE p1 TO user_name_len_40_01234567890123456789012@localhost;
ERROR HY000: String 'user_name_len_40_01234567890123456789012' is too long for user name (should be no longer than 32)
REVOKE EXECUTE ON PROCEDURE p1 FROM user_name_len_16@localhost;
REVOKE EXECUTE ON PROCEDURE p1 FROM user_name_len_22_01234@localhost;
REVOKE EXECUTE ON PROCEDURE p1 FROM user_name_len_32_012345678901234@localhost;
REVOKE EXECUTE ON PROCEDURE p1 FROM user_name_len_33_0123456789012345@localhost;
ERROR HY000: String 'user_name_len_33_0123456789012345' is too long for user name (should be no longer than 32)
REVOKE EXECUTE ON PROCEDURE p1 FROM user_name_len_40_01234567890123456789012@localhost;
ERROR HY000: String 'user_name_len_40_01234567890123456789012' is too long for user name (should be no longer than 32)
DROP USER user_name_len_40_01234567890123456789012@localhost;
ERROR HY000: String 'user_name_len_40_01234567890123456789012' is too long for user name (should be no longer than 32)
set names utf8;
CREATE USER очень_длинный_юз@localhost;
CREATE USER очень_очень_длинный_юзер@localhost;
CREATE USER очень_очень_очень_длинный_юзер__@localhost;
CREATE USER очень_очень_очень_очень_длинный_юзер@localhost;
ERROR HY000: String 'очень_очень_очень_очень_длинный_юзер' is too long for user name (should be no longer than 32)
GRANT CREATE ON myblockchaintest.* TO очень_длинный_юз@localhost;
GRANT CREATE ON myblockchaintest.* TO очень_очень_длинный_юзер@localhost;
GRANT CREATE ON myblockchaintest.* TO очень_очень_очень_длинный_юзер__@localhost;
GRANT CREATE ON myblockchaintest.* TO очень_очень_очень_очень_длинный_юзер@localhost;
ERROR HY000: String 'очень_очень_очень_очень_длинный_юзер' is too long for user name (should be no longer than 32)
REVOKE CREATE ON myblockchaintest.* FROM очень_длинный_юз@localhost;
REVOKE CREATE ON myblockchaintest.* FROM очень_очень_длинный_юзер@localhost;
REVOKE CREATE ON myblockchaintest.* FROM очень_очень_очень_длинный_юзер__@localhost;
REVOKE CREATE ON myblockchaintest.* FROM очень_очень_очень_очень_длинный_юзер@localhost;
ERROR HY000: String 'очень_очень_очень_очень_длинный_юзер' is too long for user name (should be no longer than 32)
GRANT CREATE ON t1 TO очень_длинный_юз@localhost;
GRANT CREATE ON t1 TO очень_очень_длинный_юзер@localhost;
GRANT CREATE ON t1 TO очень_очень_очень_длинный_юзер__@localhost;
GRANT CREATE ON t1 TO очень_очень_очень_очень_длинный_юзер@localhost;
ERROR HY000: String 'очень_очень_очень_очень_длинный_юзер' is too long for user name (should be no longer than 32)
REVOKE CREATE ON t1 FROM очень_длинный_юз@localhost;
REVOKE CREATE ON t1 FROM очень_очень_длинный_юзер@localhost;
REVOKE CREATE ON t1 FROM очень_очень_очень_длинный_юзер__@localhost;
REVOKE CREATE ON t1 FROM очень_очень_очень_очень_длинный_юзер@localhost;
ERROR HY000: String 'очень_очень_очень_очень_длинный_юзер' is too long for user name (should be no longer than 32)
GRANT SELECT ON t1 TO очень_длинный_юз@localhost;
GRANT SELECT ON t1 TO очень_очень_длинный_юзер@localhost;
GRANT SELECT ON t1 TO очень_очень_очень_длинный_юзер__@localhost;
GRANT SELECT ON t1 TO очень_очень_очень_очень_длинный_юзер@localhost;
ERROR HY000: String 'очень_очень_очень_очень_длинный_юзер' is too long for user name (should be no longer than 32)
REVOKE SELECT ON t1 FROM очень_длинный_юз@localhost;
REVOKE SELECT ON t1 FROM очень_очень_длинный_юзер@localhost;
REVOKE SELECT ON t1 FROM очень_очень_очень_длинный_юзер__@localhost;
REVOKE SELECT ON t1 FROM очень_очень_очень_очень_длинный_юзер@localhost;
ERROR HY000: String 'очень_очень_очень_очень_длинный_юзер' is too long for user name (should be no longer than 32)
GRANT EXECUTE ON PROCEDURE p1 TO очень_длинный_юз@localhost;
GRANT EXECUTE ON PROCEDURE p1 TO очень_очень_длинный_юзер@localhost;
GRANT EXECUTE ON PROCEDURE p1 TO очень_очень_очень_длинный_юзер__@localhost;
GRANT EXECUTE ON PROCEDURE p1 TO очень_очень_очень_очень_длинный_юзер@localhost;
ERROR HY000: String 'очень_очень_очень_очень_длинный_юзер' is too long for user name (should be no longer than 32)
REVOKE EXECUTE ON PROCEDURE p1 FROM очень_длинный_юз@localhost;
REVOKE EXECUTE ON PROCEDURE p1 FROM очень_очень_длинный_юзер@localhost;
REVOKE EXECUTE ON PROCEDURE p1 FROM очень_очень_очень_длинный_юзер__@localhost;
REVOKE EXECUTE ON PROCEDURE p1 FROM очень_очень_очень_очень_длинный_юзер@localhost;
ERROR HY000: String 'очень_очень_очень_очень_длинный_юзер' is too long for user name (should be no longer than 32)
# Create a user, assign privileges, try to connect and use the granted
# privileges. Trying out different connections (socket/TCP/SSL).
CREATE USER user_name_len_25_01234567@localhost;
GRANT CREATE ON * . * TO user_name_len_25_01234567@localhost;
# Connecting via socket
CREATE DATABASE db_1;
CREATE TABLE db_1.test_table (name varchar(15) not null, surname varchar(20) not null, 
email varchar(50) null, street varchar(50) null, city varchar(50) null, 
is_active int default 1 );
INSERT INTO db_1.test_table values('rob', 'g', 'robg@oracle.com', 'couldbeworse_street',
'couldbeworse_city', 1);
ERROR 42000: INSERT command denied to user 'user_name_len_25_01234567'@'localhost' for table 'test_table'
GRANT INSERT ON db_1.test_table TO user_name_len_25_01234567@localhost;
# Connecting via TCP/IP
INSERT INTO db_1.test_table values('rob', 'g', 'robg@oracle.com', 'couldbeworse_street',
'couldbeworse_city', 1);
INSERT INTO db_1.test_table values('kam', 'g', 'kamg@oracle.com', 'couldbeworse_street',
'couldbeworse_city', 1);
SELECT * FROM db_1.test_table;
ERROR 42000: SELECT command denied to user 'user_name_len_25_01234567'@'localhost' for table 'test_table'
GRANT SELECT ON db_1.test_table TO user_name_len_25_01234567@localhost;
# Connecting via socket/SSL
SELECT * FROM db_1.test_table;
name	surname	email	street	city	is_active
rob	g	robg@oracle.com	couldbeworse_street	couldbeworse_city	1
kam	g	kamg@oracle.com	couldbeworse_street	couldbeworse_city	1
UPDATE db_1.test_table SET street='couldbemuchworse_street' WHERE name='rob';
ERROR 42000: UPDATE command denied to user 'user_name_len_25_01234567'@'localhost' for table 'test_table'
GRANT UPDATE ON db_1.test_table TO user_name_len_25_01234567@localhost;
UPDATE db_1.test_table SET street='couldbemuchworse_street' WHERE name='rob';
DELETE FROM db_1.test_table WHERE name='rob';
ERROR 42000: DELETE command denied to user 'user_name_len_25_01234567'@'localhost' for table 'test_table'
GRANT DELETE ON db_1.test_table TO user_name_len_25_01234567@localhost;
DELETE FROM db_1.test_table WHERE name='rob';
DROP TABLE db_1.test_table;
ERROR 42000: DROP command denied to user 'user_name_len_25_01234567'@'localhost' for table 'test_table'
GRANT DROP ON db_1.* TO user_name_len_25_01234567@localhost;
# Connecting via TCP/IP/SSL
DROP TABLE db_1.test_table;
DROP DATABASE db_1;
DROP USER очень_длинный_юз@localhost;
DROP USER очень_очень_длинный_юзер@localhost;
DROP USER очень_очень_очень_длинный_юзер__@localhost;
DROP USER очень_очень_очень_очень_длинный_юзер@localhost;
ERROR HY000: String 'очень_очень_очень_очень_длинный_юзер' is too long for user name (should be no longer than 32)
set names default;
DROP USER user_name_len_16@localhost;
DROP USER user_name_len_22_01234@localhost;
DROP USER user_name_len_32_012345678901234@localhost;
DROP USER user_name_len_25_01234567@localhost;
DROP TABLE t1;
DROP PROCEDURE p1;
