--source include/have_myblockchaind_safe.inc
--source include/not_embedded.inc
--source include/not_windows.inc

# 1) Set valiables to be used in parameters of myblockchaind_safe.
let $MYBLOCKCHAIND_DATADIR= `SELECT @@datadir`;
let $MYBLOCKCHAIN_BASEDIR= `SELECT @@basedir`;
let $MYBLOCKCHAIN_SOCKET= `SELECT @@socket`;
let $MYBLOCKCHAIN_TIMEZONE= `SELECT @@time_zone`;
let $MYBLOCKCHAIN_PIDFILE= `SELECT @@pid_file`;
let $MYBLOCKCHAIN_PORT= `SELECT @@port`;
let $MYBLOCKCHAIN_MESSAGESDIR= `SELECT @@lc_messages_dir`;
let $start_page_size= `select @@innodb_page_size`;
let $other_page_size_k=    `SELECT $start_page_size DIV 1024`;
let $other_page_size_nk=       `SELECT CONCAT($other_page_size_k,'k')`;

# myblockchaind_path to be passed to --ledir
use test;
perl;
 my $dir = $ENV{'MYBLOCKCHAINTEST_VARDIR'};
 open ( OUTPUT, ">$dir/tmp/myblockchaind_path_file.inc") ;
 my $path = $ENV{MYBLOCKCHAIND};
 $path =~ /(.*?)(myblockchaind|myblockchaind-debug)$/i ;   
 print OUTPUT "let \$myblockchaind_path = $1;\n";
 close (OUTPUT);
EOF

#Get the value of the variable from to MTR, from perl
--source  $MYBLOCKCHAINTEST_VARDIR/tmp/myblockchaind_path_file.inc

#Remove the temp file
--remove_file $MYBLOCKCHAINTEST_VARDIR/tmp/myblockchaind_path_file.inc

# 2) Shutdown myblockchaind which is started by mtr.
--let $_server_id= `SELECT @@server_id`
--let $_expect_file_name= $MYBLOCKCHAINTEST_VARDIR/tmp/myblockchaind.$_server_id.expect
--exec echo "wait" > $_expect_file_name
--shutdown_server 
--source include/wait_until_disconnected.inc


# 3) Run the myblockchaind_safe script with exec.
--exec sh $MYBLOCKCHAIND_SAFE --defaults-file=$MYBLOCKCHAINTEST_VARDIR/my.cnf --log-error=$MYBLOCKCHAINTEST_VARDIR/log/err.log --basedir=$MYBLOCKCHAIN_BASEDIR --ledir=$myblockchaind_path --datadir=$MYBLOCKCHAIND_DATADIR --secure-file-priv=$MYBLOCKCHAINTEST_VARDIR --socket=$MYBLOCKCHAIN_SOCKET --pid-file=$MYBLOCKCHAIN_PIDFILE --port=$MYBLOCKCHAIN_PORT --timezone=SYSTEM --log-output=file --loose-debug-sync-timeout=600 --default-storage-engine=InnoDB --default-tmp-storage-engine=InnoDB --loose-skip-log-bin --core-file --lc-messages-dir=$MYBLOCKCHAIN_MESSAGESDIR --innodb-page-size=$other_page_size_nk < /dev/null > /dev/null 2>&1 &

# myblockchaind_safe takes some time to start myblockchaind
--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

# 4) Reconnect to myblockchaind again
connection default;

# 5) Execute some SQL
--exec $MYBLOCKCHAIN -h localhost -S $MYBLOCKCHAIN_SOCKET -P $MYBLOCKCHAIN_PORT -u root -e "SHOW DATABASES" 2>&1

# 6) Kill myblockchaind, which must be restarted now automaticly by myblockchaind_safe
--exec sh $MYBLOCKCHAIN_TEST_DIR/t/myblockchaind_safe.sh $MYBLOCKCHAIN_PIDFILE 2>&1

# myblockchaind_safe takes some time to restart myblockchaind
--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

# 7) Execute some SQL
--exec $MYBLOCKCHAIN -h localhost -S $MYBLOCKCHAIN_SOCKET -P $MYBLOCKCHAIN_PORT -u root -e "SHOW DATABASES" 2>&1

# 8) Shutdown myblockchaind with myblockchainadmin
--exec $MYBLOCKCHAINADMIN -h localhost -S $MYBLOCKCHAIN_SOCKET -P $MYBLOCKCHAIN_PORT -u root shutdown 2>&1

# Delay introduced - myblockchaind_safe takes some time to restart myblockchaind
--source include/wait_until_disconnected.inc

# 9) Restart myblockchaind of mtr
--exec echo "restart" > $MYBLOCKCHAINTEST_VARDIR/tmp/myblockchaind.1.expect
--enable_reconnect
--source include/wait_until_connected_again.inc
