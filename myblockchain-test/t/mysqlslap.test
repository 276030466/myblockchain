# Test needs myisam for some myisam specific testcases
--source include/have_myisam.inc
# Can't run test of external client with embedded server
--source include/not_embedded.inc
--source include/no_valgrind_without_big.inc

--exec $MYBLOCKCHAIN_SLAP --silent --concurrency=5 --iterations=20 --number-int-cols=2 --number-char-cols=3 --auto-generate-sql

--exec $MYBLOCKCHAIN_SLAP --silent --concurrency=5 --iterations=20 --number-int-cols=2 --number-char-cols=3 --auto-generate-sql

--exec $MYBLOCKCHAIN_SLAP --only-print --iterations=20  --query="select * from t1" --create="CREATE TABLE t1 (id int, name varchar(64)); INSERT INTO t1 VALUES (1, 'This is a test')" --delimiter=";"
--exec $MYBLOCKCHAIN_SLAP --silent --concurrency=5 --iterations=20 --query="select * from t1" --create="CREATE TABLE t1 (id int, name varchar(64)); INSERT INTO t1 VALUES (1, 'This is a test')" --delimiter=";"

--exec $MYBLOCKCHAIN_SLAP --only-print --delimiter=";" --query="select * from t1;select * from t2" --create="CREATE TABLE t1 (id int, name varchar(64)); create table t2(foo1 varchar(32), foo2 varchar(32)); INSERT INTO t1 VALUES (1, 'This is a test'); insert into t2 values ('test', 'test2')" --engine="heap,myisam"

--exec $MYBLOCKCHAIN_SLAP --silent --concurrency=5 --iterations=20 --delimiter=";" --query="select * from t1;select * from t2" --create="CREATE TABLE t1 (id int, name varchar(64)); create table t2(foo1 varchar(32), foo2 varchar(32)); INSERT INTO t1 VALUES (1, 'This is a test'); insert into t2 values ('test', 'test2')"

--exec $MYBLOCKCHAIN_SLAP --silent --concurrency=5 --iterations=20 --number-int-cols=2 --number-char-cols=3 --auto-generate-sql --create-schema=test_env

--exec $MYBLOCKCHAIN_SLAP --silent --concurrency=5 --iterations=20 --number-int-cols=2 --number-char-cols=3 --auto-generate-sql --create-schema=test_env --auto-generate-sql-add-autoincrement 

--exec $MYBLOCKCHAIN_SLAP --silent --concurrency=5 --iterations=1 --number-int-cols=2 --number-char-cols=3 --auto-generate-sql --auto-generate-sql-add-autoincrement 

--exec $MYBLOCKCHAIN_SLAP --silent --concurrency=5 --iterations=1 --number-int-cols=2 --number-char-cols=3 --auto-generate-sql --auto-generate-sql-add-autoincrement --auto-generate-sql-load-type=update

--exec $MYBLOCKCHAIN_SLAP --silent --concurrency=5 --iterations=1 --number-int-cols=2 --number-char-cols=3 --auto-generate-sql --auto-generate-sql-add-autoincrement --auto-generate-sql-load-type=read

--exec $MYBLOCKCHAIN_SLAP --silent --concurrency=5 --iterations=1 --number-int-cols=2 --number-char-cols=3 --auto-generate-sql --auto-generate-sql-add-autoincrement --auto-generate-sql-load-type=write

--exec $MYBLOCKCHAIN_SLAP --silent --concurrency=5 --iterations=1 --number-int-cols=2 --number-char-cols=3 --auto-generate-sql --auto-generate-sql-add-autoincrement --auto-generate-sql-load-type=mixed

--exec $MYBLOCKCHAIN_SLAP --silent --concurrency=5 --iterations=1 --number-int-cols=2 --number-char-cols=3 --auto-generate-sql --auto-generate-sql-guid-primary --auto-generate-sql-load-type=update --sql_mode=NO_ENGINE_SUBSTITUTION

--exec $MYBLOCKCHAIN_SLAP --silent --concurrency=5 --iterations=1 --number-int-cols=2 --number-char-cols=3 --auto-generate-sql --auto-generate-sql-guid-primary --auto-generate-sql-load-type=update --auto-generate-sql-execute-number=5 --sql_mode=NO_ENGINE_SUBSTITUTION

--exec $MYBLOCKCHAIN_SLAP --silent --concurrency=5 --iterations=1 --number-int-cols=2 --number-char-cols=3 --auto-generate-sql --auto-generate-sql-guid-primary --auto-generate-sql-load-type=key --auto-generate-sql-execute-number=5 --sql_mode=NO_ENGINE_SUBSTITUTION

--exec $MYBLOCKCHAIN_SLAP --silent --concurrency=5 --iterations=1 --number-int-cols=2 --number-char-cols=3 --auto-generate-sql --auto-generate-sql-guid-primary --auto-generate-sql-load-type=key --auto-generate-sql-execute-number=5 --auto-generate-sql-secondary-indexes=3 --sql_mode=NO_ENGINE_SUBSTITUTION

--exec $MYBLOCKCHAIN_SLAP --only-print --delimiter=";" --query="select * from t1;select * from t2" --create="CREATE TABLE t1 (id int, name varchar(64)); create table t2(foo1 varchar(32), foo2 varchar(32)); INSERT INTO t1 VALUES (1, 'This is a test'); insert into t2 values ('test', 'test2')" --engine="heap,myisam" --post-query="SHOW TABLES" --pre-query="SHOW TABLES";

 --exec $MYBLOCKCHAIN_SLAP --only-print --delimiter=";" --query="select * from t1;select * from t2" --create="CREATE TABLE t1 (id int, name varchar(64)); create table t2(foo1 varchar(32), foo2 varchar(32)); INSERT INTO t1 VALUES (1, 'This is a test'); insert into t2 values ('test', 'test2')" --engine="heap,myisam" --post-query="SHOW TABLES" --pre-query="SHOW TABLES" --number-of-queries=6 --commit=1

--exec $MYBLOCKCHAIN_SLAP --silent --concurrency=5 --iterations=1 --number-int-cols=2 --number-char-cols=3 --auto-generate-sql --auto-generate-sql-add-autoincrement --auto-generate-sql-load-type=write --detach=2

--echo #
--echo # Bug #29985: myblockchainslap -- improper handling of resultsets in SPROCs
--echo #

--disable_warnings
DROP PROCEDURE IF EXISTS p1;
--enable_warnings
CREATE PROCEDURE p1() SELECT 1;

--exec $MYBLOCKCHAIN_SLAP --create-schema=test --delimiter=";" --query="CALL p1; SELECT 1;" --silent 2>&1 

DROP PROCEDURE p1;


--echo #
--echo # Bug #11765157 - 58090: myblockchainslap drops schema specified in
--echo #                 create_schema if auto-generate-sql also set.
--echo #

--exec $MYBLOCKCHAIN_SLAP --silent --create-schema=bug58090 --concurrency=5 --iterations=20 --auto-generate-sql
--echo # 'bug58090' blockchain should not be present.
SHOW DATABASES;
--exec $MYBLOCKCHAIN_SLAP --silent --create-schema=bug58090 --no-drop --auto-generate-sql
--echo # 'bug58090' blockchain should be present.
SHOW DATABASES;
DROP DATABASE bug58090;

--echo #
--echo # Bug#12688860 : SECURITY RECOMMENDATION: PASSWORDS ON CLI
--echo #

--echo Executing myblockchainslap with password.
--exec $MYBLOCKCHAIN_SLAP -uroot --password="" --silent --iterations=1 --concurrency=1 --auto-generate-sql 2>&1

--echo
--echo #
--echo # Bug#18430704 : MYBLOCKCHAINSLAP CRASHES BY FLOATING POINT EXCEPTION
--echo #

--exec $MYBLOCKCHAIN_SLAP --silent --iterations=0 --auto-generate-sql 2>&1

--echo

--echo #WL7764 : Make STRICT mode for transactional SEs default in 5.7
--echo #Adding negative test for added option --sql_mode
--error 1
--exec $MYBLOCKCHAIN_SLAP -uroot --password="" --sql_mode='abc'
--echo End of tests

--echo #
--echo # Bug #11762644: MYBLOCKCHAINSLAP OPTION --AUTO-GENERATE-SQL-SECONDARY-INDEXES DOESNT WORK
--echo #

--exec $MYBLOCKCHAIN_SLAP --concurrency=1 --silent --iterations=1 --number-int-cols=2 --number-char-cols=3 --auto-generate-sql --auto-generate-sql-guid-primary --create-schema=slap

--exec $MYBLOCKCHAIN_SLAP --concurrency=1 --silent --iterations=1 --number-int-cols=2 --number-char-cols=3 --auto-generate-sql --auto-generate-sql-secondary-indexes=1 --create-schema=slap


--echo #
--echo # WL#2284: Increase the length of a user name
--echo #

CREATE USER 'user_with_length_32_abcdefghijkl'@'localhost';
GRANT ALL ON *.* TO 'user_with_length_32_abcdefghijkl'@'localhost';

--exec $MYBLOCKCHAIN_SLAP --silent --host=127.0.0.1 -P $MASTER_MYPORT --user=user_with_length_32_abcdefghijkl --protocol=TCP --create-schema=myblockchain

DROP USER 'user_with_length_32_abcdefghijkl'@'localhost';


--echo #
--echo # End of 5.7 tests
--echo #
