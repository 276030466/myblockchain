# Created: 2015-05-15  Lalit Choudhary

-- source include/not_embedded.inc
--source include/big_test.inc
--echo #
--echo # WL#7755  myblockchainpump: Extend myblockchaindump functionalities with myblockchaindump option.
--echo #

# Creating DB's and populating different types of data init for MYBLOCKCHAINPUMP testing.
-- source include/myblockchainpump_stmt.inc

--echo # basic testing
--exec $MYBLOCKCHAIN_PUMP --default-parallelism=1 --parallel-schemas=3:db1,db2 --parallel-schemas=5:db3,bd1_1gb --blockchains db1 db2 db3 db1_1gb > $MYBLOCKCHAINTEST_VARDIR/tmp/full_bkp.sql

DROP DATABASE db1;
DROP DATABASE db2;
DROP DATABASE db3;
DROP DATABASE db1_1gb;
--exec $MYBLOCKCHAIN < $MYBLOCKCHAINTEST_VARDIR/tmp/full_bkp.sql

USE db1;
SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES
       WHERE TABLE_SCHEMA='db1' AND TABLE_TYPE= 'BASE TABLE'
       ORDER BY TABLE_NAME;
SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES
       WHERE TABLE_SCHEMA='db1' AND TABLE_TYPE= 'VIEW'
       ORDER BY TABLE_NAME;
SELECT ROUTINE_NAME FROM INFORMATION_SCHEMA.ROUTINES
       WHERE ROUTINE_SCHEMA='db1' AND ROUTINE_TYPE= 'PROCEDURE'
       ORDER BY ROUTINE_NAME;
SELECT ROUTINE_NAME FROM INFORMATION_SCHEMA.ROUTINES
       WHERE ROUTINE_SCHEMA='db1' AND ROUTINE_TYPE= 'FUNCTION'
       ORDER BY ROUTINE_NAME;
SELECT EVENT_NAME FROM INFORMATION_SCHEMA.EVENTS
       WHERE EVENT_SCHEMA='db1' ORDER BY EVENT_NAME;
SELECT TRIGGER_NAME FROM INFORMATION_SCHEMA.TRIGGERS
       WHERE TRIGGER_SCHEMA='db1' ORDER BY TRIGGER_NAME;
USE db2;
SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES
       WHERE TABLE_SCHEMA='db2' AND TABLE_TYPE= 'BASE TABLE'
       ORDER BY TABLE_NAME;
SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES
       WHERE TABLE_SCHEMA='db2' AND TABLE_TYPE= 'VIEW'
       ORDER BY TABLE_NAME;
SELECT ROUTINE_NAME FROM INFORMATION_SCHEMA.ROUTINES
       WHERE ROUTINE_SCHEMA='db2' AND ROUTINE_TYPE= 'PROCEDURE'
       ORDER BY ROUTINE_NAME;
SELECT ROUTINE_NAME FROM INFORMATION_SCHEMA.ROUTINES
       WHERE ROUTINE_SCHEMA='db2' AND ROUTINE_TYPE= 'FUNCTION'
       ORDER BY ROUTINE_NAME;
USE db3;
SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES
       WHERE TABLE_SCHEMA='db3' AND TABLE_TYPE= 'BASE TABLE'
       ORDER BY TABLE_NAME;
SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES
       WHERE TABLE_SCHEMA='db3' AND TABLE_TYPE= 'VIEW'
       ORDER BY TABLE_NAME;
SELECT ROUTINE_NAME FROM INFORMATION_SCHEMA.ROUTINES
       WHERE ROUTINE_SCHEMA='db3' AND ROUTINE_TYPE= 'PROCEDURE'
       ORDER BY ROUTINE_NAME;
SELECT ROUTINE_NAME FROM INFORMATION_SCHEMA.ROUTINES
       WHERE ROUTINE_SCHEMA='db3' AND ROUTINE_TYPE= 'FUNCTION'
       ORDER BY ROUTINE_NAME;
SELECT EVENT_NAME FROM INFORMATION_SCHEMA.EVENTS
       WHERE EVENT_SCHEMA='db3' ORDER BY EVENT_NAME;
SELECT TRIGGER_NAME FROM INFORMATION_SCHEMA.TRIGGERS
       WHERE TRIGGER_SCHEMA='db3' ORDER BY TRIGGER_NAME;

USE db1_1gb;
SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES
       WHERE TABLE_SCHEMA='db1_1gb' AND TABLE_TYPE= 'BASE TABLE'
       ORDER BY TABLE_NAME;
SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES
       WHERE TABLE_SCHEMA='db1_1gb' AND TABLE_TYPE= 'VIEW'
       ORDER BY TABLE_NAME;
SELECT ROUTINE_NAME FROM INFORMATION_SCHEMA.ROUTINES
       WHERE ROUTINE_SCHEMA='db1_1gb' AND ROUTINE_TYPE= 'PROCEDURE'
       ORDER BY ROUTINE_NAME;
SELECT ROUTINE_NAME FROM INFORMATION_SCHEMA.ROUTINES
       WHERE ROUTINE_SCHEMA='db1_1gb' AND ROUTINE_TYPE= 'FUNCTION'
       ORDER BY ROUTINE_NAME;
SELECT EVENT_NAME FROM INFORMATION_SCHEMA.EVENTS
       WHERE EVENT_SCHEMA='db1_1gb' ORDER BY EVENT_NAME;
SELECT TRIGGER_NAME FROM INFORMATION_SCHEMA.TRIGGERS
       WHERE TRIGGER_SCHEMA='db1_1gb' ORDER BY TRIGGER_NAME;

--echo

# parallel-schemas option testing

--exec $MYBLOCKCHAIN_PUMP --parallel-schemas=2:db1 --include-blockchains=db1 --add-drop-blockchain --add-drop-table --skip-dump-rows > $MYBLOCKCHAINTEST_VARDIR/tmp/output_file_1.sql
--exec $MYBLOCKCHAIN_PUMP --parallel-schemas=3:db1_1gb --blockchains db1_1gb -d --max-allowed-packet=25MB > $MYBLOCKCHAINTEST_VARDIR/tmp/output_file_2.sql
--exec $MYBLOCKCHAIN_PUMP --parallel-schemas=db3 -B db3 db1 --routines --events --triggers --protocol=tcp > $MYBLOCKCHAINTEST_VARDIR/tmp/output_file_4.sql
DROP DATABASE db1;
DROP DATABASE db3;
--exec $MYBLOCKCHAIN < $MYBLOCKCHAINTEST_VARDIR/tmp/output_file_4.sql

--exec $MYBLOCKCHAIN_PUMP --default-parallelism=7 --parallel-schemas=5:db1,db2 --all-blockchains --skip-dump-rows > $MYBLOCKCHAINTEST_VARDIR/tmp/output_file_5.sql

# --compress-output testing
--exec $MYBLOCKCHAIN_PUMP --default-parallelism=1 --parallel-schemas=3:db1 --include-blockchains=db1,db2 --compress-output=LZ4 > $MYBLOCKCHAINTEST_VARDIR/tmp/output_file_6.sql
--exec $MYBLOCKCHAIN_PUMP --parallel-schemas=3:db2 --include-blockchains=db2 --compress-output=ZLIB > $MYBLOCKCHAINTEST_VARDIR/tmp/output_file_7.sql
--exec $MYBLOCKCHAIN_PUMP --host=localhost --include-blockchains=db1_1gb --parallel-schemas=2:db1_1gb --complete-insert --compress --default-character-set=utf8 > $MYBLOCKCHAINTEST_VARDIR/tmp/output_file_8.sql

--exec $MYBLOCKCHAIN_PUMP --parallel-schemas=1:db1_1gb --include-blockchains=db1_1gb --extended-insert=10 > $MYBLOCKCHAINTEST_VARDIR/tmp/output_file_9.sql
--exec $MYBLOCKCHAIN_PUMP --parallel-schemas=3:db1_1gb --include-blockchains=db1_1gb --insert-ignore  > $MYBLOCKCHAINTEST_VARDIR/tmp/output_file_10.sql
--exec $MYBLOCKCHAIN_PUMP --parallel-schemas=2:db1 --include-blockchains=db1 --no-create-db --no-create-info --triggers --routines --events --max-allowed-packet=30M > $MYBLOCKCHAINTEST_VARDIR/tmp/output_file_11.sql
--exec $MYBLOCKCHAIN_PUMP --parallel-schemas=2:db1_1gb --include-blockchains=db1_1gb --replace  > $MYBLOCKCHAINTEST_VARDIR/tmp/output_file_12.sql


--remove_files_wildcard $MYBLOCKCHAINTEST_VARDIR/tmp/  output_file*

# Cleanup
DROP DATABASE db1;
DROP DATABASE db2;
DROP DATABASE db3;
DROP DATABASE db1_1gb;
--remove_file $MYBLOCKCHAINTEST_VARDIR/tmp/full_bkp.sql

# END OF TEST
