# Tests for PERFORMANCE_SCHEMA table io

--source include/not_embedded.inc
--source include/have_perfschema.inc
--source ../include/table_io_setup_helper.inc

# Remove "deleted" records from myblockchain.* that may come from previous tests,
# to avoid displaying spurious fetch.
# There are two possible server reactions which are both ok.
# Table  Op      Msg_type        Msg_text
# myblockchain.db       optimize        status  OK
# or
# myblockchain.db       optimize        status  Table is already up to date
# Therefore we suppress the query_log here.
--echo # We are forced to suppress here the server response.
--disable_result_log
optimize table myblockchain.host;
optimize table myblockchain.user;
optimize table myblockchain.db;
optimize table myblockchain.proxies_priv;
optimize table myblockchain.tables_priv;
optimize table myblockchain.procs_priv;
optimize table myblockchain.servers;
--enable_result_log

# Start recording events
update performance_schema.setup_consumers set enabled='YES';
update performance_schema.setup_objects set enabled='YES'
  where object_type='TABLE' and object_schema= 'myblockchain';

# Code to test

flush privileges;
# This will cause table io in myblockchain system security tables
insert into test.marker set a = 1;
# This will not, the ACL cache is already loaded
insert into test.marker set a = 1;
insert into test.marker set a = 1;
show global variables like "performance_schema%";
show global status like "performance_schema%";
# Stop recording events + pull results
let $schema_to_dump= "test", "myblockchain";
--source ../include/table_io_result_helper.inc

# Cleanup
--source ../include/table_io_cleanup_helper.inc

update performance_schema.setup_objects set enabled='NO'
  where object_type='TABLE' and object_schema= 'myblockchain';
