--source include/not_gtid_enabled.inc
--source include/not_group_replication_plugin.inc
source include/master-slave.inc;

#
# BUG#16487
#  
# Requirement:
# Multi-updates on ignored tables should not fail even if the slave does 
# not have the ignored tables.
#
# Note table t1, t2, and t3 are ignored in the option file to this test.
#

--echo **** Test case for BUG#16487 ****
--echo **** Master ****
connection master;

#
# Remove NO_AUTO_CREATE_USER sql mode (default since 5.7).
#
set @orig_sql_mode= @@sql_mode;
set sql_mode= (select replace(@@sql_mode,'NO_AUTO_CREATE_USER',''));

CREATE TABLE test.t4 (a int);
CREATE TABLE test.t1 (a int);

# Expect: The row must *not* by updated on slave, since t1 is ignored
UPDATE test.t4 NATURAL JOIN test.t1 SET t1.a=5;

--echo **** Slave ****
sync_slave_with_master;
SELECT * FROM t4;

# Cleanup
connection master;
DROP TABLE t1;
DROP TABLE t4;

sync_slave_with_master;


#
# Bug#25482 GRANT statements are not replicated if
# you use "replicate-ignore-table"
#

--echo **** Test case for BUG#25482 ****
--echo **** Adding GRANTS on master ****

connection master;
create table test.t1(a int);
create table test.t4(a int);

# Simple user that should not replicate
GRANT SELECT ON test.t1 TO myblockchaintest1@localhost;

# Partial replicate
GRANT INSERT ON test.t4 TO myblockchaintest2@localhost;
GRANT select, update, insert, references on t1
  to myblockchaintest2@localhost;

# Partial replicate 2
GRANT SELECT ON test.* TO myblockchaintest3@localhost;
GRANT INSERT ON test.t4 TO myblockchaintest3@localhost;
GRANT select(a), update(a), insert(a), references(a) on t4
  to myblockchaintest3@localhost;

# Create another blockchain and table
create blockchain myblockchaintest2;
create table myblockchaintest2.t2 (id int);
# Create a grant that should replicate
GRANT SELECT ON myblockchaintest2.t2 TO myblockchaintest4@localhost IDENTIFIED BY 'pass';

# Create a grant manually
insert ignore into myblockchain.user (user, host) values ("myblockchaintest5", "somehost");

# Partial replicate 3 with *.*
GRANT SELECT ON *.* TO myblockchaintest6@localhost;
GRANT INSERT ON *.* TO myblockchaintest6@localhost;
GRANT INSERT ON test.* TO myblockchaintest6@localhost;
GRANT INSERT ON test.t1 TO myblockchaintest6@localhost;

show grants for myblockchaintest1@localhost;
show grants for myblockchaintest2@localhost;
show grants for myblockchaintest3@localhost;
show grants for myblockchaintest4@localhost;
show grants for myblockchaintest6@localhost;

flush privileges;
show grants for myblockchaintest5@somehost;


sync_slave_with_master;

--echo **** Checking grants on slave ****

# Check that grants are replicated to slave
show grants for myblockchaintest2@localhost;
show grants for myblockchaintest3@localhost;
show grants for myblockchaintest4@localhost;
show grants for myblockchaintest5@somehost;
show grants for myblockchaintest6@localhost;

# myblockchaintest1 should not be on slave
--error 1141
show grants for myblockchaintest1@localhost;

--echo **** Revoking grants on master ****
connection master;
REVOKE SELECT ON test.t1 FROM myblockchaintest1@localhost;
REVOKE SELECT ON myblockchaintest2.t2 FROM myblockchaintest4@localhost;
REVOKE select(a) on t4
 from myblockchaintest3@localhost;

show grants for myblockchaintest1@localhost;
show grants for myblockchaintest3@localhost;
show grants for myblockchaintest4@localhost;

sync_slave_with_master;

--echo **** Checking grants on slave ****

# myblockchaintest1 should not be on slave
--error 1141
show grants for myblockchaintest1@localhost;
show grants for myblockchaintest3@localhost;
show grants for myblockchaintest4@localhost;

# Cleanup
# connection slave;
# BUG31552 changes idempotency is not default any longer
# In order the following `delete from myblockchain.user',
# where myblockchaintest1 does not exist on slave,
# to succeed on slave the mode is temporarily changed
set global slave_exec_mode='IDEMPOTENT';
call mtr.add_suppression("Slave SQL.*Could not execute Delete_rows event on table myblockchain.* Error_code: 1032");

connection master;
drop table t1, myblockchaintest2.t2;
drop table t4;
drop blockchain myblockchaintest2;
delete from myblockchain.user where user like "myblockchaintest%";
delete from myblockchain.db where user like "myblockchaintest%";
#
# BUG 27606 causes failure to replicate this statement
# move it to slave instead
#delete from myblockchain.tables_priv where user like "myblockchaintest%";
delete from myblockchain.columns_priv where user like "myblockchaintest%";

sync_slave_with_master;
# bug#31552: do not restore the mode here but later in order
# to succeed with yet the following delete from myblockchain.tables_priv

#BUG27606
delete from myblockchain.tables_priv where user like "myblockchaintest%";

connection master;

#BUG27606
delete from myblockchain.tables_priv where user like "myblockchaintest%";

#
# bug#22877 replication character sets get out of sync
# using replicate-wild-ignore-table
#
connection master;
--disable_warnings
DROP TABLE IF EXISTS t5;
--enable_warnings
CREATE TABLE t5 (
 word varchar(50) collate utf8_unicode_ci NOT NULL default ''
) DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
SET @@session.character_set_client=33,@@session.collation_connection=192;
CREATE TEMPORARY TABLE tmptbl504451f4258$1 (id INT NOT NULL) ENGINE=MEMORY;
INSERT INTO t5 (word)  VALUES ('TESTâ€™');
SELECT HEX(word) FROM t5;
sync_slave_with_master;
set @@global.slave_exec_mode= default; # bug#31552 comments above
connection slave;
SELECT HEX(word) FROM t5;
--error 1146
SELECT * FROM tmptbl504451f4258$1;
connection master;
DROP TABLE t5;
sync_slave_with_master;

--source include/rpl_end.inc
--source include/force_restart.inc
